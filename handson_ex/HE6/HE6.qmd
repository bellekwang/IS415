---
title: "Hands-on Exercise 6: Spatial Weights and Application"
date: "13 Feb 2023"
date-modified: "`r Sys.Date()`"
number-sections: true
format: html
execute: 
  echo: true
  eval: true
  warning: false
editor: visual
---

# Setting Up

## Installing and Loading Packages

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr)
```

## Importing Data

### Hunan Shapefile

```{r}
hunan <- st_read(
  dsn = "data/geospatial",
  layer = "Hunan"
)
```

-   hunan is a POLYGON sf data frame with 88 features

-   Hunan is located in Central China which uses a CRS of WGS 84 (?)

### Hunan 2012 Development Indicator

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

## Relational Joint

Using the `left_join()` function of dplyr package, combine hunan2012 to hunan sf data frame.

Using the `select()` function, pick out columns:

```{r}
hunan <- left_join(hunan, hunan2012) %>%
  select(1:4, 7, 15)
```

# Visualising Regional Development Indicator

Using qtm() function from tmap, create a basemap and a choropleth map, showing the distribution of GDPPC 2012.

```{r}
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size = 0.3)

gdppc <- qtm(hunan, "GDPPC")

tmap_arrange(basemap, gdppc, asp = 1, ncol = 2)
```

# Computing Contiguity Spatial Weights

-   poly2nb() from spdep package

## Computing Queen contiguity based neighbours

```{r}
wm_q <- poly2nb(hunan, queen = TRUE)
summary(wm_q)
```

-   The most connected area unit has 11 neighbours

-   There are 2 area units with only one neighbour

To check the neighbours of one area unit:

```{r}
wm_q[[1]]
```

-   Polygon 1 has 5 neighbours

To check the country name of area unit 1:

```{r}
hunan$County[1]
```

To check the country names of the 5 neighbours:

```{r}
hunan$NAME_3[c(2, 3, 4, 57, 85)]
```

To retrieve the GDPPC of the 5 neighbour countries:

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

## Creating Rook Contiguity Based Neighbours

Using `poly2nb()` function, when `queen = FALSE`, rook's case will be used.

```{r}
wm_r <- poly2nb(hunan, queen = FALSE)
summary(wm_r)
```

-   most connected area unit has 10 neighbours, 1 less than that of queen's case

-   2 area unit has only one neighbour, same as that of queen's case

## Visualising Contiguity Weights

Connectivity graph: takes a point and displays a line to each neighbouring point

-   for polygons: need to get points before creating the graph (use centroids: latitude and longitude)

### Calculating Centroids

To get the longitude:

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

To get the latitude:

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

Combing the latitude and longitude into one object:

```{r}
coords <- cbind(longitude, latitude)
```

```{r}
head(coords)
```

### Plotting Queen Contiguity Based Neighbours Map

Plot the geometry boundary before the points and lines.

```{r}
plot(hunan$geometry, border = "lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

-   `add = TRUE`: Add to a previous plot

-   `pch`: option to specify symbols for plotting points

-   `cex`: amount by which plotting text and symbols should be scaled relative to the default

### Plotting Rook Contiguity Based Neighbours Map

```{r}
plot(hunan$geometry, border = "lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

### Plotting Both Maps

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red", main="Queen Contiguity")
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red", main="Rook Contiguity")
```

# Computing Distance Based Neighbours

-   `dnearneigh()` from spdep: identifies neighbours of region points by euclidean distance

    -   bounds: lower d1 and upper d2

    -   unit: km

## Calculating Cut-off Distance

Cut-off distance: upper limit for distance band

First, using `knearneigh()` of spdep, calculate a matrix of indices of points of the k nearest neighbours.

At the same time, using `knn2nb()`, convert the knn object into a nb list (vectors containing neighbour ids).

```{r}
k1 <- knn2nb(knearneigh(coords))
```

Next, calculate the length of neighbour relationship edges using `nbdists()` and remove the list structure using `unlist()`.

```{r}
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

-   Largest first nearest neighbour distance = 61.79km

-   Upper threshold = 61.79km, anything below this distance will guarantee at least 1 neighbour

## Calculating Fixed Distance Weight Matrix

Using `dnearneigh()` function, calculate the weight matrix with an upper limit of 62km.

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

-   Each polygon has an average of 3.68 links.

To display the matrix, use the `table()` and `card()` functions from spdep.

```{r}
table(hunan$County, card(wm_d62))
```

## Plotting Fixed Distance Weight Matrix

```{r}
plot(hunan$geometry, border = "lightgrey")
plot(wm_d62, coords, add = TRUE)
plot(k1, coords, add = TRUE, col = "red", length = 0.08)
```

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(k1, coords, add=TRUE, col="red", length=0.08, main="1st nearest neighbours")
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6, main="Distance link")
```

## Calculating Adaptive Distance Weight Matrix

Instead of controlling the distance, can choose the number of nearest neighbours.

```{r}
knn6 <- knn2nb(knearneigh(coords, k = 6))
knn6
```

## Plotting Adaptive Distance Based Matrix

```{r}
plot(hunan$geometry, border = "lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

# Calculate Weights Based on Inversed Distance Method

First, compute the distances between area using `nbdists()`Â from spdep package.

```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
```

```{r}
ids <- lapply(dist, function(x) 1/(x))
head(ids)
```

Next, perform row standardisation using `nb2listw()` with `style = "W"` to assign an equal weight.

-   `zero.policy = TRUE`: allows for lists of non-neighbours

```{r}
rswm_q <- nb2listw(wm_q, style = "W", zero.policy = TRUE)
rswm_q
```

To check the weight of the first polygon's neighbours

```{r}
rswm_q$weights[1]
```
