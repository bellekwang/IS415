---
title: "Hands-on Exercise 8"
subtitle: "Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method"
date: "6 Mar 2023"
date-modified: "`r Sys.Date()`"
number-sections: true
format: html
execute: 
  echo: true
  eval: true
  warning: false
editor: visual
---

# Setting Up

## Installing and Loading Packages

```{r}
pacman::p_load(olsrr, corrplot, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary)
```

-   olsrr: build OLS and perform diagnostic tests

-   corrplot: multivariate data visualisation and analysis

-   ggpubr:

-   GWmodel: calibrate geographical weighted family of models

-   gtsummary:

## Geospatial Data Wrangling

### Importing Data

```{r}
mpsz = st_read(
  dsn = "data/geospatial",
  layer = "MP14_SUBZONE_WEB_PL"
)
```

### CRS Projection

Ensure that the CRS is has the correct ESPG code (3414).

```{r}
mpsz_svy21 <- st_transform(mpsz, 3414)
```

```{r}
st_crs(mpsz_svy21)
```

## Aspatial Data Wrangling

### Importing Data

```{r}
condo_resale = read_csv("data/aspatial/Condo_resale_2015.csv")
```

### Conversion to sf Object

```{r}
condo_resale.sf <- st_as_sf(
  condo_resale,
  coords = c("LONGITUDE", "LATITUDE"),
  crs = 4326
) %>%
  st_transform(crs = 3414)
```

### Final sf Object

```{r}
head(condo_resale.sf)
```

# Exploratory Data Analysis

## Statistical Graphics

### Selling Price

```{r}
ggplot(
  data = condo_resale.sf,
  aes(x=`SELLING_PRICE`)
) +
  geom_histogram(
    bins = 20, color = "black", fill = "light blue"
  )
```

-   There is a right skewed distribution, more condominium units were transacted at relatively lower prices.

To normalise the distribution, use the log transformation and create a new column using the `mutate()` function.

```{r}
condo_resale.sf <- condo_resale.sf %>%
  mutate(`LOG_SELLING_PRICE` = log(SELLING_PRICE))
```

Plotting the new transformed column:

```{r}
ggplot(
  data = condo_resale.sf,
  aes(x=`LOG_SELLING_PRICE`)
) +
  geom_histogram(
    bins = 20, color = "black", fill = "light blue"
  )
```

-   Distribution is relatively less skewed ðŸ˜„

## Multiple Histogram Plots Distribution of Variables

To draw multiple small histograms, use `ggarange()` to organise the number of rows and columns.

```{r}
AREA_SQM <- ggplot(data=condo_resale.sf, aes(x= `AREA_SQM`)) + 
  geom_histogram(bins=20, color="black", fill="light blue")

AGE <- ggplot(data=condo_resale.sf, aes(x= `AGE`)) +
  geom_histogram(bins=20, color="black", fill="light blue")

PROX_CBD <- ggplot(data=condo_resale.sf, aes(x= `PROX_CBD`)) +
  geom_histogram(bins=20, color="black", fill="light blue")

PROX_CHILDCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_CHILDCARE`)) + 
  geom_histogram(bins=20, color="black", fill="light blue")

PROX_ELDERLYCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_ELDERLYCARE`)) +
  geom_histogram(bins=20, color="black", fill="light blue")

PROX_URA_GROWTH_AREA <- ggplot(data=condo_resale.sf, 
                               aes(x= `PROX_URA_GROWTH_AREA`)) +
  geom_histogram(bins=20, color="black", fill="light blue")

PROX_HAWKER_MARKET <- ggplot(data=condo_resale.sf, aes(x= `PROX_HAWKER_MARKET`)) +
  geom_histogram(bins=20, color="black", fill="light blue")

PROX_KINDERGARTEN <- ggplot(data=condo_resale.sf, aes(x= `PROX_KINDERGARTEN`)) +
  geom_histogram(bins=20, color="black", fill="light blue")

PROX_MRT <- ggplot(data=condo_resale.sf, aes(x= `PROX_MRT`)) +
  geom_histogram(bins=20, color="black", fill="light blue")

PROX_PARK <- ggplot(data=condo_resale.sf, aes(x= `PROX_PARK`)) +
  geom_histogram(bins=20, color="black", fill="light blue")

PROX_PRIMARY_SCH <- ggplot(data=condo_resale.sf, aes(x= `PROX_PRIMARY_SCH`)) +
  geom_histogram(bins=20, color="black", fill="light blue")

PROX_TOP_PRIMARY_SCH <- ggplot(data=condo_resale.sf, 
                               aes(x= `PROX_TOP_PRIMARY_SCH`)) +
  geom_histogram(bins=20, color="black", fill="light blue")

ggarrange(AREA_SQM, AGE, PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, 
          PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN, PROX_MRT,
          PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH,  
          ncol = 3, nrow = 4)
```

## Statistical Point Map

```{r}
tmap_mode("view")
tm_shape(mpsz_svy21)+
  tm_polygons() +
  tmap_options(check.and.fix = TRUE) +
tm_shape(condo_resale.sf) +  
  tm_dots(col = "SELLING_PRICE",
          alpha = 0.6,
          style="quantile") +
  tm_view(set.zoom.limits = c(10,14))
```

# Hedonic Pricing Modelling

## Simple Linear Regression

To build a simple linear regression model, call the `lm()` function.

-   formula = dependent variable \~ independent variable

```{r}
condo.slr <- lm(
  formula = SELLING_PRICE ~ AREA_SQM,
  data = condo_resale.sf
)
```

```{r}
summary(condo.slr)
```

-   $SELLINGPRICE = -258121.1 + 14719x1$

-   R-sqaured: 0.4518

    -   model built is able to explain about 45% of the resale prices

-   p-value \<\< 0.0001

    -   reject null hypothesis, mean is a good estimator of selling price

    -   slr model is a good estimator

### Best Fit Curve

```{r}
ggplot(data=condo_resale.sf,  
       aes(x=`AREA_SQM`, y=`SELLING_PRICE`)) +
  geom_point() +
  geom_smooth(method = lm)
```

-   There are a few statistical outliers with relatively high selling prices

## Multiple Linear Regression

### Relationship of Independent Variables

Understanding the multicollinearity of the variables is important before building the MLR model. The independent variables should not be highly correlated to each other.

```{r}
corrplot(cor(condo_resale[, 5:23]), diag = FALSE, order = "AOE",
         tl.pos = "td", tl.cex = 0.5, method = "number", type = "upper")
```

-   Freehold is highly correlated to LEASE_99YEAR, LEASE_99YEAR will be excluded

### Building the MLR Model

```{r}
condo.mlr <- lm(
  formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + PROX_KINDERGARTEN + PROX_MRT  + PROX_PARK + PROX_PRIMARY_SCH + PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD,
  data=condo_resale.sf)
summary(condo.mlr)
```

-   Looking at the p-values of the independent variables, not all variables are statistically significant.

    -   PROX_HAWKER_MARKET, PROX_KINDERGARTEN, PROX_TOP_PRIMARY_SCH, PROX_SUPERMARKET

    -   These variables should be removed.

```{r}
condo.mlr1 <- lm(
  formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_MRT  + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD,
 data=condo_resale.sf)
```

### Preparing Publication Quality Table (olsrr)

Using `ols_regress()` function, calibrate the revised model.

```{r}
ols_regress(condo.mlr1)
```

### Preparing Publication Quality Table (gtsummary)

This method is prettier ðŸŽ€

```{r}
tbl_regression(condo.mlr1, intercept = TRUE)
```

#### Adding Model Statistics

Using `add_glance_table()` or `add_glance_source_note()` function to add model statistics into the report table.

```{r}
tbl_regression(condo.mlr1, 
               intercept = TRUE) %>% 
  add_glance_source_note(
    label = list(sigma ~ "\U03C3"),
    include = c(r.squared, adj.r.squared, 
                AIC, statistic,
                p.value, sigma))
```

## Checking for Multicolinearity

```{r}
ols_vif_tol(condo.mlr1)
```

-   if VIF \< 10: no sign of multicollinearity among independent variables

### Checking for Non-linearity

MLR model should fufill assumption that linearity and additivity of the relationship between dependent and independent variables.

Plot out the residual vs fitted values to perform linearity assumption test with `ols_plot_resid_fit()`.

```{r}
ols_plot_resid_fit(condo.mlr1)
```

-   Most of the data points are scattered around the 0 line, relationship between dependent and independent variables are linear.

### Checking for Normality Assumption

#### Via Plotting

```{r}
ols_plot_resid_hist(condo.mlr1)
```

-   Residual of MLR model resembles normal distribution.

#### Via p-values

```{r}
ols_test_normality(condo.mlr1)
```

-   p-values \<\< 0.05

    -   reject the null hypothesis, there is statistical evidence that residual are normally distributed

### Checking for Spatial Autocorrelation

First, export the residual values as a data frame.

```{r}
mlr.output <- as.data.frame(condo.mlr1$residuals)
```

Combine it with the condo_resale.sf object.

```{r}
condo_resale.res.sf <- cbind(condo_resale.sf, 
                        condo.mlr1$residuals) %>%
rename(`MLR_RES` = `condo.mlr1.residuals`)
```

Next, convert condo_resale.sf from a sf data frame into a spatial points data frame.

```{r}
condo_resale.sp <- as_Spatial(condo_resale.res.sf)
condo_resale.sp
```

#### Plotting the Distribution of Residuals

```{r}
tmap_mode("view")
tm_shape(mpsz_svy21)+
  tmap_options(check.and.fix = TRUE) +
  tm_polygons(alpha = 0.4) +
tm_shape(condo_resale.res.sf) +  
  tm_dots(col = "MLR_RES",
          alpha = 0.6,
          style="quantile") +
  tm_view(set.zoom.limits = c(11,14))
```

-   There is a sign of spatial autocorrelation.

#### Moran's I

To proof that there is sign of spatial autocorrelation, perform the Moran's I test.

```{r}
nb <- dnearneigh(coordinates(condo_resale.sp), 0, 1500, longlat = FALSE)
nb_lw <- nb2listw(nb, style = 'W')
lm.morantest(condo.mlr1, nb_lw)
```

-   p-value \<\< 0.05

    -   reject null hypothesis that the residuals are randomly distributed

-   Observed Moran I = 0.143 \> 0

    -   the residual resembles cluster distribution

## GWModel

### Fixed Bandwidth GWR Model

#### Computing Fixed Bandwidth

```{r}
bw.fixed <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + 
                     PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + 
                     PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + 
                     PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + 
                     FAMILY_FRIENDLY + FREEHOLD, 
                   data=condo_resale.sp, 
                   approach="CV", 
                   kernel="gaussian", 
                   adaptive=FALSE, 
                   longlat=FALSE)
```

-   The fixed bandwidth should be 971.3405m.

#### Creating the Model

```{r}
gwr.fixed <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + 
                         PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + 
                         PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + 
                         PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + 
                         FAMILY_FRIENDLY + FREEHOLD, 
                       data=condo_resale.sp, 
                       bw=bw.fixed, 
                       kernel = 'gaussian', 
                       longlat = FALSE)
```

```{r}
gwr.fixed
```

-   AICc of GWR is 42263.1

    -   significantly smaller than the global MLR model of 42967.1

### Adaptive Bandwidth GWR Model

#### Computing the Adaptive Bandwidth

```{r}
bw.adaptive <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE  + 
                        PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE    + 
                        PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + 
                        PROX_PRIMARY_SCH + PROX_SHOPPING_MALL   + PROX_BUS_STOP + 
                        NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, 
                      data=condo_resale.sp, 
                      approach="CV", 
                      kernel="gaussian", 
                      adaptive=TRUE, 
                      longlat=FALSE)
```

-   Recommended data points to use: 30

#### Creating the Model

```{r}
gwr.adaptive <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + 
                            PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE + 
                            PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + 
                            PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP + 
                            NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, 
                          data=condo_resale.sp, bw=bw.adaptive, 
                          kernel = 'gaussian', 
                          adaptive=TRUE, 
                          longlat = FALSE)
```

```{r}
gwr.adaptive
```

-   AICc of adaptive distance GWR: 41982.22

    -   even smaller than AICc of fixed distance GWR of 42263.61

### Visualising GWR Output

#### Convert SDF into sf data frame

```{r}
condo_resale.sf.adaptive <- st_as_sf(gwr.adaptive$SDF) %>%
  st_transform(crs=3414)
condo_resale.sf.adaptive.svy21 <- st_transform(condo_resale.sf.adaptive, 3414)
condo_resale.sf.adaptive.svy21  
```

```{r}
gwr.adaptive.output <- as.data.frame(gwr.adaptive$SDF)
condo_resale.sf.adaptive <- cbind(condo_resale.res.sf, as.matrix(gwr.adaptive.output))
```

```{r}
glimpse(condo_resale.sf.adaptive)
```

#### Visualising Local R2

```{r}
tmap_mode("view")
tm_shape(mpsz_svy21)+
  tm_polygons(alpha = 0.1) +
tm_shape(condo_resale.sf.adaptive) +  
  tm_dots(col = "Local_R2",
          border.col = "gray60",
          border.lwd = 1) +
  tm_view(set.zoom.limits = c(11,14))
```

#### Visualising Coefficient Estimates

```{r}
tmap_mode("view")
AREA_SQM_SE <- tm_shape(mpsz_svy21)+
  tm_polygons(alpha = 0.1) +
tm_shape(condo_resale.sf.adaptive) +  
  tm_dots(col = "AREA_SQM_SE",
          border.col = "gray60",
          border.lwd = 1) +
  tm_view(set.zoom.limits = c(11,14))

AREA_SQM_TV <- tm_shape(mpsz_svy21)+
  tm_polygons(alpha = 0.1) +
tm_shape(condo_resale.sf.adaptive) +  
  tm_dots(col = "AREA_SQM_TV",
          border.col = "gray60",
          border.lwd = 1) +
  tm_view(set.zoom.limits = c(11,14))

tmap_arrange(AREA_SQM_SE, AREA_SQM_TV, 
             asp=1, ncol=2,
             sync = TRUE)
```

#### Plotting by URA Planning Region

```{r}
tm_shape(mpsz_svy21[mpsz_svy21$REGION_N=="CENTRAL REGION", ])+
  tm_polygons()+
tm_shape(condo_resale.sf.adaptive) + 
  tm_bubbles(col = "Local_R2",
           size = 0.15,
           border.col = "gray60",
           border.lwd = 1)
```
