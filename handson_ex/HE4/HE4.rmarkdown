---
title: "Hands-on Exercise 4 & 5: 1st & 2nd Order Spatial Point Patterns Analysis Methods"
date: "30 Jan 2023"
date-modified: "`r Sys.Date()`"
number-sections: true
format: html
execute: 
  echo: true
  eval: true
  warning: false
editor: visual
---


## Getting Started

### Installing and Loading Packages


```{r}
pacman::p_load(maptools, sf, raster, spatstat, tmap, tidyr, dplyr)
```


## Data Wrangling

### Spatial Data

#### Importing the Spatial Data


```{r}
childcare_sf <- st_read(dsn = "data/child-care-services-geojson.geojson") %>%
  st_transform(crs = 3414)
```

```{r}
sg_sf <- st_read(dsn = "data", layer = "CostalOutline")
```

```{r}
mpsz_sf <- st_read(dsn = "data", layer = "MP14_SUBZONE_WEB_PL")
```


Checking CRS of each simple features data frame


```{r}
st_crs(childcare_sf)
```

```{r}
st_crs(mpsz_sf)
```

```{r}
st_crs(sg_sf)
```


Updating CRS on mpsz_sf and sg_sf


```{r}
mpsz_sf <- st_transform(mpsz_sf, crs = 3414)
```

```{r}
st_crs(mpsz_sf)
```

```{r}
sg_sf <- st_transform(sg_sf, crs = 3414)
```

```{r}
st_crs(sg_sf)
```


## Mapping Geospatial Data Sets

### Childcare Data


```{r}
tmap_mode('plot')
tm_shape(childcare_sf)+
  tm_dots(alph=0.5, size=0.01)+
  tm_view(set.zoom.limits = c(11,14))
```

```{r}
tmap_mode('view')
tm_shape(childcare_sf)+
  tm_dots()
```


## Geospatial Data Wrangling

### Conversion to Spatial Point/Polygon Data Frame


```{r}
childcare <- as_Spatial(childcare_sf)
mpsz <- as_Spatial(mpsz_sf)
sg <- as_Spatial(sg_sf)
```

```{r}
childcare
```

```{r}
mpsz
```

```{r}
sg
```


### Conversion from Spatial Classes to Spatial Objects


```{r}
childcare_sp <- as(childcare, "SpatialPoints")
sg_sp <- as(sg, "SpatialPolygons")
```

```{r}
childcare_sp
```

```{r}
sg_sp
```


### Conversion from Spatial Object to ppp Format (spatstat)


```{r}
childcare_ppp <- as(childcare_sp, "ppp")
childcare_ppp
```

```{r}
plot(childcare_ppp)
```

```{r}
summary(childcare_ppp)
```


### Jittering Duplicate Points

Check for any duplicate points


```{r}
any(duplicated(childcare_ppp))
```


Check the number of duplications


```{r}
sum(multiplicity(childcare_ppp) > 1)
```


Jitter the duplicate points


```{r}
childcare_ppp_jit <- rjitter(childcare_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
```


Check for duplicate points


```{r}
any(duplicated(childcare_ppp_jit))
```


### Creating owin Object


```{r}
sg_owin <- as(sg_sp, "owin")
```

```{r}
plot(sg_owin)
```

```{r}
summary(sg_owin)
```


### Combining Point Events Object and owin Object


```{r}
childcareSG_ppp = childcare_ppp[sg_owin]
```

```{r}
summary(childcareSG_ppp)
```


Plotting childcareSG_ppp


```{r}
plot(childcareSG_ppp)
```


## First-order Spatial Point Patterns Analysis

### Kernel Density Estimation

#### Automatic Bandwidth Selection Method


```{r}
kde_childcareSG_bw <- density(
  childcareSG_ppp,
  sigma = bw.diggle,
  edge = TRUE,
  kernel = "gaussian"
)
```

```{r}
plot(kde_childcareSG_bw)
```


Retrieving the bandwidth used to compute KDE layer


```{r}
bw <- bw.diggle(childcareSG_ppp)
bw
```


#### Re-scaling KDE Values

Convert unit of measurement from meter to kilometer


```{r}
childcareSG_ppp.km <- rescale(childcareSG_ppp, 1000, "km")
```

```{r}
kde_childcareSG_bw <- density(
  childcareSG_ppp.km,
  sigma = bw.diggle,
  edge = TRUE,
  kernel = "gaussian"
)
```

```{r}
plot(kde_childcareSG_bw)
```


### Alternative Methods


```{r}
bw.CvL(childcareSG_ppp.km)
```

```{r}
bw.scott(childcareSG_ppp.km)
```

```{r}
bw.ppl(childcareSG_ppp.km)
```

```{r}
bw.diggle(childcareSG_ppp.km)
```


#### Comparing Outputs of Different Algorithms


```{r}
kde_childcareSG.ppl <- density(childcareSG_ppp.km, 
                               sigma=bw.ppl, 
                               edge=TRUE,
                               kernel="gaussian")
par(mfrow=c(1,2))
plot(kde_childcareSG_bw, main = "bw.diggle")
plot(kde_childcareSG.ppl, main = "bw.ppl")
```


#### Alternative Kernel Methods


```{r}
par(mfrow = c(2,2))
plot(density(
  childcareSG_ppp.km,
  sigma = bw.ppl,
  edge = TRUE,
  kernel = "gaussian"
), main = "Gaussian")
plot(density(
  childcareSG_ppp.km,
  sigma = bw.ppl,
  edge = TRUE,
  kernel = "epanechnikov"
), main = "Epanechnikov")
plot(density(
  childcareSG_ppp.km,
  sigma = bw.ppl,
  edge = TRUE,
  kernel = "quartic"
), main = "Quartic")
plot(density(
  childcareSG_ppp.km,
  sigma = bw.ppl,
  edge = TRUE,
  kernel = "disc"
), main = "Disc")
```


#### Comparing Fixed and Adaptive Bandwidth


```{r}
par(mfrow = c(1,2))
plot(density(
  childcareSG_ppp.km,
  sigma = 0.6,
  edge = TRUE,
  kernel = "gaussian"
), main = "Fixed Bandwidth")
plot(adaptive.density(
  childcareSG_ppp.km,
  method = "kernel"
), main = "Adaptive Bandwidth")
```


#### Converting KDE Output to Grid Object


```{r}
gridded_kde_childcareSG_bw <- as.SpatialGridDataFrame.im(kde_childcareSG_bw)
spplot(gridded_kde_childcareSG_bw)
```


#### Convert Grid Output to Raster Layer


```{r}
kde_childcareSG_bw_raster <- raster(gridded_kde_childcareSG_bw)
```

```{r}
kde_childcareSG_bw_raster
```


Missing CRS requires projection systems assignment


```{r}
projection(kde_childcareSG_bw_raster) <- CRS("+init=EPSG:3414")
kde_childcareSG_bw_raster
```


#### Visualising Output


```{r}
tm_shape(kde_childcareSG_bw_raster) +
  tm_raster("v") +
  tm_layout(
    legend.position = c("right", "bottom"),
    frame = FALSE
  )
```


### Comparing Spatial Point Patterns

#### Extracting Study Area

Comparing KDE of childcare at 4 locations: Punggol, Tampines, Choa Chu Kang and Jurong West.


```{r}
pg = mpsz[mpsz@data$PLN_AREA_N == "PUNGGOL",]
tm = mpsz[mpsz@data$PLN_AREA_N == "TAMPINES",]
ck = mpsz[mpsz@data$PLN_AREA_N == "CHOA CHU KANG",]
jw = mpsz[mpsz@data$PLN_AREA_N == "JURONG WEST",]
```


Plotting the 4 target planning areas:


```{r}
par(mfrow = c(2,2))
plot(pg, main = "Punggol")
plot(tm, main = "Tampines")
plot(ck, main = "Choa Chu Kang")
plot(jw, main = "Jurong West")
```


#### Converting Spatial Point Data Frame into Spatial Polygon Objects


```{r}
pg_sp = as(pg, "SpatialPolygons")
tm_sp = as(tm, "SpatialPolygons")
ck_sp = as(ck, "SpatialPolygons")
jw_sp = as(jw, "SpatialPolygons")
```


#### Converting Spatial Polygon Objects to owin Objects


```{r}
pg_owin = as(pg_sp, "owin")
tm_owin = as(tm_sp, "owin")
ck_owin = as(ck_sp, "owin")
jw_owin = as(jw_sp, "owin")
```


#### Combining Childcare Points and Study Areas


```{r}
childcare_pg_ppp = childcare_ppp_jit[pg_owin]
childcare_tm_ppp = childcare_ppp_jit[tm_owin]
childcare_ck_ppp = childcare_ppp_jit[ck_owin]
childcare_jw_ppp = childcare_ppp_jit[jw_owin]
```


#### Re-scaling unit of measurement from meter to kilometer:


```{r}
childcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, "km")
```


#### Plotting Output


```{r}
par(mfrow = c(2,2))
plot(childcare_pg_ppp.km, main = "Punggol")
plot(childcare_tm_ppp.km, main = "Tampines")
plot(childcare_ck_ppp.km, main = "Choa Chu Kang")
plot(childcare_jw_ppp.km, main = "Jurong West")
```


#### Computing KDE


```{r}
par(mfrow = c(2,2))
plot(density(
  childcare_pg_ppp.km,
  sigma = bw.diggle,
  edge = TRUE,
  kernel = "gaussian"
), main = "Punggol")
plot(density(
  childcare_tm_ppp.km,
  sigma = bw.diggle,
  edge = TRUE,
  kernel = "gaussian"
), main = "Tampines")
plot(density(
  childcare_ck_ppp.km,
  sigma = bw.diggle,
  edge = TRUE,
  kernel = "gaussian"
), main = "Choa Chu Kang")
plot(density(
  childcare_jw_ppp.km,
  sigma = bw.diggle,
  edge = TRUE,
  kernel = "gaussian"
), main = "Jurong West")
```


#### Computing Fixed Bandwidth KDE

Bandwidth = 250m


```{r}
par(mfrow = c(2,2))
plot(density(
  childcare_pg_ppp.km,
  sigma = 0.25,
  edge = TRUE,
  kernel = "gaussian"
), main = "Punggol")
plot(density(
  childcare_tm_ppp.km,
  sigma = 0.25,
  edge = TRUE,
  kernel = "gaussian"
), main = "Tampines")
plot(density(
  childcare_ck_ppp.km,
  sigma = 0.25,
  edge = TRUE,
  kernel = "gaussian"
), main = "Choa Chu Kang")
plot(density(
  childcare_jw_ppp.km,
  sigma = 0.25,
  edge = TRUE,
  kernel = "gaussian"
), main = "Jurong West")
```


## Nearest Neighbour Analysis

Test hypotheses:

H0 = The distribution of childcare services are randomly distributed.

H1 = The distribution of childcare services are not randomly distributed.

Confident Interval of 95%.

### Clark and Evans Test

#### Singapore Area


```{r}
clarkevans.test(
  childcareSG_ppp,
  correction = "none",
  clipregion = "sg_owin",
  alternative = c("clustered"),
  nsim = 99
)
```


Conclusion:

Since p-value is smaller than 0.05, null hypothesis is rejected. The distribution of childcare services are not randomly distributed.

Since the R value is 0.55 (2 d.p.) \< 1, the pattern exhibits clustering.

#### Choa Chu Kang Planning Area


```{r}
clarkevans.test(
  childcare_ck_ppp,
  correction = "none",
  clipregion = NULL,
  alternative = c("two.sided"),
  nsim = 999
)
```


Conclusion:

Since p-value is larger than 0.05, null hypothesis is not rejected. The distribution of childcare services in Choa Chu Kang are randomly distributed.

Since the R value is 0.97 (2 d.p.) \< 1, the pattern exhibits clustering.

#### Tampines Planning Area


```{r}
clarkevans.test(
  childcare_tm_ppp,
  correction = "none",
  clipregion = NULL,
  alternative = "two.sided",
  nsim = 999
)
```


Conclusion:

Since p-value is smaller than 0.05, null hypothesis is rejected. The distribution of childcare services in Tampines are not randomly distributed.

Since the R value is 0.80 (2 d.p.) \< 1, the pattern exhibits clustering.

## 2nd Order Spatial Point Pattern Analysis Methods

### G-Function

Measures distribution of distances from an arbitrary event to its nearest event.

#### Choa Chu Kang Planning Area

-   `Gest(x)`: Estimates the nearest neighbour distance distribution function from a point pattern in a window of arbitrary shape


```{r}
G_CK = Gest(childcare_ck_ppp, correction = "border")
plot(G_CK, xlim = c(0, 500))
```


-   envelope(x)

    -   if p-value \< alpha-value (0.001) = null hypothesis is rejected


```{r}
G_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)
```

```{r}
plot(G_CK.csr)
```


#### Tampines Planning Area


```{r}
G_tm = Gest(childcare_tm_ppp, correction = "best")
plot(G_tm)
```

```{r}
G_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = "all", nsim = 999)
```

```{r}
plot(G_tm.csr)
```


### F-Function

Estimates empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape.

#### Choa Chu Kang Planning Area


```{r}
F_CK = Fest(childcare_ck_ppp)
plot(F_CK)
```


Complete Spatial Randomness Test


```{r}
F_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)
```

```{r}
plot(F_CK.csr)
```


#### Tampines


```{r}
F_tm = Fest(childcare_tm_ppp, correction = "best")
plot(F_tm)
```

```{r}
F_tm.csr <- envelope(childcare_tm_ppp, Fest, correction = "all", nsim = 999)
```

```{r}
plot(F_tm.csr)
```


### K-Function

Measures the number of events found up to a given distance of any particular event.

#### Choa Chu Kang


```{r}
K_ck = Kest(childcare_ck_ppp, correction = "Ripley")
plot(K_ck, . -r ~ r, ylab= "K(d)-r", xlab = "d(m)")
```

```{r}
K_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(K_ck.csr, . - r ~ r, xlab="d", ylab="K(d)-r")
```


#### Tampines Planning Area


```{r}
K_tm = Kest(childcare_tm_ppp, correction = "Ripley")
plot(K_tm, . -r ~ r, 
     ylab= "K(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))
```

```{r}
K_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(K_tm.csr, . - r ~ r, 
     xlab="d", ylab="K(d)-r", xlim=c(0,500))
```


### L-Function

#### Choa Chu Kang Planning Area


```{r}
L_ck = Lest(childcare_ck_ppp, correction = "Ripley")
plot(L_ck, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)")
```

```{r}
L_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(L_ck.csr, . - r ~ r, xlab="d", ylab="L(d)-r")
```


#### Tampines Planning Area


```{r}
L_tm = Lest(childcare_tm_ppp, correction = "Ripley")
plot(L_tm, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))
```

```{r}
L_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(L_tm.csr, . - r ~ r, 
     xlab="d", ylab="L(d)-r", xlim=c(0,500))
```

