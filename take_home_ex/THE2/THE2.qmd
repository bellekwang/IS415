---
title: "Take-home Exercise 2"
subtitle: "Spatio-temporal Analysis of COVID-19 Vaccination Trends at the Sub-district Level, DKI Jakarta"
date: "26 Feb 2023"
date-modified: "`r Sys.Date()`"
number-sections: true
format: html
execute: 
  echo: true
  eval: true
  warning: false
editor: visual
---

# Context

## Problem Statement

Understanding how Covid-19 vaccination rate is distributed around DKI Jakarta and how it changes over time.

## Data

| Data                                    | Format (Type)          | Description                                                                                                                    | Source                                                                                                             |
|-----------------------------------------|------------------------|--------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------|
| Riwayat File Vaksinasi DKI Jakarta      | Excel (Aspatial)       | Details the daily number of vaccinations in Jakarta by person type and sub-district (Only the first day of each month is used) | [Riwatat File Vaksinasi DKI Jakarta](https://riwayat-file-vaksinasi-dki-jakarta-jakartagis.hub.arcgis.com/) (2022) |
| DKI Jakarta Adminstration Boundary 2019 | Shapefile (Geospatial) | DKI Jakarta administrative boundaries                                                                                          | [Indonesia Geospasial](https://www.indonesia-geospasial.com/2020/04/download-shapefile-shp-batas-desa.html) (2019) |

::: callout-note
For the Vaksinasi DKI Jakarta data for March 2022, there was no available link to 1 March 2022 data. Thus for March 2022, the first day available, 2 March 2022, will be used instead.
:::

# Setting Up

## Installing and Loading Packages

```{r}
pacman::p_load(sf, tmap, sfdep, tidyverse, zoo, readxl, plotly, Kendall, ggplot2, dplyr)
```

-   sf: importing and handling geospatial data

-   tidyverse: wrangling attribute data

-   sfdep: newer package of spdep (does not require conversion to sp)

-   tmap: prepare cartographic quality chropleth maps

-   zoo: for regular and irregular time series

-   readxl: read excel (xlsx) format

-   plotly: interactive web graphics from ggplot2 graphs

-   Kendall: to perform Mann-Kendall test

-   ggplot2: plot temporal trend

-   dplyr: join_by() function

## DKI Jakarta Administrative Boundary 2019

### Importing Data

To import a shapefile, use `st_read()` where `dsn` is the targeted directory and `layer` is the name of the files.

```{r}
jkt <- st_read(
  dsn = "data/geospatial",
  layer = "BATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA"
)
```

-   `jkt` is a multipolygon sf dataframe with 269 features

### Projection

The current geodetic CRS is WGS 84 which is wrong. Using `st_transform()`, change the CRS from WGS 84 to DGN95 (EPSG:23845), the national projected coordinates systems of Indonesia TM-3 zone 54.1.

```{r}
jkt <- st_transform(jkt, crs = 23845)
st_crs(jkt)
```

### Data Cleaning

#### Outer Island

First, using tmap functions `tm_shape()` and `tm_polygons()`, plot out `jkt` to understand the area covered. I will also be adding the "DESA" label to identify which are the areas to exclude.

```{r}
tmap_mode("view")
tm_shape(jkt) +
  tm_polygons() +
  tm_text("DESA") +
tm_view(set.zoom.limits = c(9,12))
```

There are many outer islands shown on the plot above. As seen from the plot, the areas to be excluded are: Pulau Harapan, Pulau Kelapa, Pulau Panggang, Pulau Tidung, Pulau Pari and Pulau Untung Jawa.

```{r}
outer_islands <- c("PULAU HARAPAN", "PULAU KELAPA", "PULAU PANGGANG", "PULAU TIDUNG", "PULAU PARI", "PULAU UNTUNG JAWA")
```

Use the `filter()` function to remove the outer islands.

```{r}
jkt <- jkt %>%
  filter(!DESA %in% outer_islands)
```

Now using the plot mode, plot out `jkt` and ensure all outer islands are excluded.

```{r}
tmap_mode("plot")
tm_shape(jkt) +
  tm_polygons()
```

As you can see from the plot, all the outer islands are excluded.

#### Unnecessary Fields

Only the first nine columns of the sf dataframe is relevant. Using the `select()` function, pick out the first nine columns.

```{r}
jkt <- select(jkt, 1:9)
```

### Final `jkt` Data Frame

```{r}
st_geometry(jkt)
```

## Riwayat File Vaksinasi DKI Jakarta

There are 12 excel files from July 2021 to June 2022 to be imported. Using `read_excel()` function, import the "Data Kelurahan" sheet.

```{r}
july_2021 = read_excel("data/aspatial/july_2021.xlsx", sheet = 1)
aug_2021 = read_excel("data/aspatial/aug_2021.xlsx", sheet = "Data Kelurahan")
sept_2021 = read_excel("data/aspatial/sept_2021.xlsx", sheet = "Data Kelurahan")
oct_2021 = read_excel("data/aspatial/oct_2021.xlsx", sheet = "Data Kelurahan")
nov_2021 = read_excel("data/aspatial/nov_2021.xlsx", sheet = "Data Kelurahan")
dec_2021 = read_excel("data/aspatial/dec_2021.xlsx", sheet = "Data Kelurahan")
jan_2022 = read_excel("data/aspatial/jan_2022.xlsx", sheet = "Data Kelurahan")
feb_2022 = read_excel("data/aspatial/feb_2022.xlsx", sheet = "Data Kelurahan")
mar_2022 = read_excel("data/aspatial/mar_2022.xlsx", sheet = "Data Kelurahan")
apr_2022 = read_excel("data/aspatial/apr_2022.xlsx", sheet = "Data Kelurahan")
may_2022 = read_excel("data/aspatial/may_2022.xlsx", sheet = "Data Kelurahan")
june_2022 = read_excel("data/aspatial/june_2022.xlsx", sheet = "Data Kelurahan")
```

### Data Cleaning

I will exclude all the outer_islands identified earlier.

```{r}
july_2021 <- july_2021 %>%
  filter(!KELURAHAN %in% outer_islands)
aug_2021 <- aug_2021 %>%
  filter(!KELURAHAN %in% outer_islands)
sept_2021 <- sept_2021 %>%
  filter(!KELURAHAN %in% outer_islands)
oct_2021 <- oct_2021 %>%
  filter(!KELURAHAN %in% outer_islands)
nov_2021 <- nov_2021 %>%
  filter(!KELURAHAN %in% outer_islands)
dec_2021 <- dec_2021 %>%
  filter(!KELURAHAN %in% outer_islands)
jan_2022 <- jan_2022 %>%
  filter(!KELURAHAN %in% outer_islands)
feb_2022 <- feb_2022 %>%
  filter(!KELURAHAN %in% outer_islands)
mar_2022 <- mar_2022 %>%
  filter(!KELURAHAN %in% outer_islands)
apr_2022 <- apr_2022 %>%
  filter(!KELURAHAN %in% outer_islands)
may_2022 <- may_2022 %>%
  filter(!KELURAHAN %in% outer_islands)
june_2022 <- june_2022 %>%
  filter(!KELURAHAN %in% outer_islands)
```

All the tables now have 262 observations, 1 less than the `jkt` multipolygon dataframe.

#### Unnecessary Columns

Only the first 6 columns are important to the exercise.

```{r}
july_2021 <- select(july_2021, 1:6)
aug_2021 <- select(aug_2021, 1:6)
sept_2021 <- select(sept_2021, 1:6)
oct_2021 <- select(oct_2021, 1:6)
nov_2021 <- select(nov_2021, 1:6)
dec_2021 <- select(dec_2021, 1:6)
jan_2022 <- select(jan_2022, 1:6)
feb_2022 <- select(feb_2022, 1:6)
mar_2022 <- select(mar_2022, 1:6)
apr_2022 <- select(apr_2022, 1:6)
may_2022 <- select(may_2022, 1:6)
june_2022 <- select(june_2022, 1:6)
```

Now all the datasets only have 6 columns.

### Combining Datasets

First, add a date column to each data frame using the `mutate()` and `as.Date()` function.

```{r}
july_2021 <- july_2021 %>%
  mutate(dateMonth = as.Date("2021-07-01"))
aug_2021 <- aug_2021 %>%
  mutate(dateMonth = as.Date("2021-08-01"))
sept_2021 <- sept_2021 %>%
  mutate(dateMonth = as.Date("2021-09-01"))
oct_2021 <- oct_2021 %>%
  mutate(dateMonth = as.Date("2021-10-01"))
nov_2021 <- nov_2021 %>%
  mutate(dateMonth = as.Date("2021-11-01"))
dec_2021 <- dec_2021 %>%
  mutate(dateMonth = as.Date("2021-12-01"))
jan_2022 <- jan_2022 %>%
  mutate(dateMonth = as.Date("2022-01-01"))
feb_2022 <- feb_2022 %>%
  mutate(dateMonth = as.Date("2022-02-01"))
mar_2022 <- mar_2022 %>%
  mutate(dateMonth = as.Date("2022-03-02"))
apr_2022 <- apr_2022 %>%
  mutate(dateMonth = as.Date("2022-04-01"))
may_2022 <- may_2022 %>%
  mutate(dateMonth = as.Date("2022-05-01"))
june_2022 <- june_2022 %>%
  mutate(dateMonth = as.Date("2022-06-01"))
```

Next, I will combine all the 12 datasets into 1 dataset using `rbind()` function.

```{r}
vacc_data <- rbind(july_2021, aug_2021, sept_2021, oct_2021, nov_2021, dec_2021, jan_2022, feb_2022, mar_2022, apr_2022, may_2022, june_2022)
```

### Final Dataset

```{r}
head(vacc_data)
```

The final `vacc_data` dataset has a total of 7 columns:

1.  Identifiers: Kode Kelurahan / Kelurahan
2.  Targeted people to be vaccinated: Sasaran
3.  Yet to be vaccinated: Belum Vaksin
4.  Date identifier: dateMonth

# Choropleth Mapping and Analysis

## Monthly Vaccination Rates at Sub-district Level

### Computing Monthly Vaccination Rates

-   SASARAN (Targeted people to be vaccinated)

-   BELUM VAKSIN (Yet to be vaccinated)

Using the equation below, compute the monthly vaccination rate and add the rate value as a new column 'monthly_vacc_rate' using the `mutate()`Â function.

$$
Monthly Vaccination Rate = \frac{(SASARAN - BELUMVAKSIN)}{SUM(SASARAN, BELUMVAKSIN)}
$$

```{r}
vacc_data <- vacc_data %>%
  mutate(monthly_vacc_rate = (SASARAN - `BELUM VAKSIN`)/(SASARAN + `BELUM VAKSIN`))
```

### Combining Dataset and Shapefile

Using the `left_join()` function, with identifiers "DESA" and "KELURAHAN", combine the `vacc_data` dataset with the `jkt` shapefile.

```{r}
vacc_july_2021 <- vacc_data %>%
  filter(dateMonth == "2021-07-01")
jkt_july_2021 <- left_join(jkt, vacc_july_2021, by = c("DESA" = "KELURAHAN" ))
```

## Choropleth Mapping

Using the `qtm()` function, plot out the choropleth map for July 2021.

```{r}
qtm(jkt_july_2021, "monthly_vacc_rate", title = "July 2021", fill.palette="Greens")
```

As seen above, there are missing monthly vaccinated rate values for some sub-districts. There is a mismatch and lack of vaccination data for these areas.

I will leave them as missing values instead of giving a monthly vaccination rate of 0 to avoid confusion with actual areas with recorded 0 rates.

### Other Months

Repeat the above steps for the next 11 months.

```{r}
#| code-fold: true
#AUGUST 2021
vacc_aug_2021 <- vacc_data %>%
  filter(dateMonth == "2021-08-01")
jkt_aug_2021 <- left_join(jkt, vacc_aug_2021, by = c("DESA" = "KELURAHAN" ))

#SEPTEMBER 2021
vacc_sept_2021 <- vacc_data %>%
  filter(dateMonth == "2021-09-01")
jkt_sept_2021 <- left_join(jkt, vacc_sept_2021, by = c("DESA" = "KELURAHAN" ))

#OCTOBER 2021
vacc_oct_2021 <- vacc_data %>%
  filter(dateMonth == "2021-10-01")
jkt_oct_2021 <- left_join(jkt, vacc_oct_2021, by = c("DESA" = "KELURAHAN" ))

#NOVEMBER 2021
vacc_nov_2021 <- vacc_data %>%
  filter(dateMonth == "2021-11-01")
jkt_nov_2021 <- left_join(jkt, vacc_nov_2021, by = c("DESA" = "KELURAHAN" ))

#DECEMBER 2021
vacc_dec_2021 <- vacc_data %>%
  filter(dateMonth == "2021-12-01")
jkt_dec_2021 <- left_join(jkt, vacc_dec_2021, by = c("DESA" = "KELURAHAN" ))

#JANUARY 2022
vacc_jan_2022 <- vacc_data %>%
  filter(dateMonth == "2022-01-01")
jkt_jan_2022 <- left_join(jkt, vacc_jan_2022, by = c("DESA" = "KELURAHAN" ))

#FEBRUARY 2022
vacc_feb_2022 <- vacc_data %>%
  filter(dateMonth == "2022-02-01")
jkt_feb_2022 <- left_join(jkt, vacc_feb_2022, by = c("DESA" = "KELURAHAN" ))

#MARCH 2022
vacc_mar_2022 <- vacc_data %>%
  filter(dateMonth == "2022-03-02")
jkt_mar_2022 <- left_join(jkt, vacc_mar_2022, by = c("DESA" = "KELURAHAN" ))

#APRIL 2022
vacc_apr_2022 <- vacc_data %>%
  filter(dateMonth == "2022-04-01")
jkt_apr_2022 <- left_join(jkt, vacc_apr_2022, by = c("DESA" = "KELURAHAN" ))

#MAY 2022
vacc_may_2022 <- vacc_data %>%
  filter(dateMonth == "2022-05-01")
jkt_may_2022 <- left_join(jkt, vacc_may_2022, by = c("DESA" = "KELURAHAN" ))

#JUNE 2022
vacc_june_2022 <- vacc_data %>%
  filter(dateMonth == "2022-06-01")
jkt_june_2022 <- left_join(jkt, vacc_june_2022, by = c("DESA" = "KELURAHAN" ))
```

```{r}
#| code-fold: true
qtm(jkt_july_2021, "monthly_vacc_rate", title = "July 2021", fill.palette="Greens")
qtm(jkt_aug_2021, "monthly_vacc_rate", title = "Aug 2021", fill.palette="Greens")
qtm(jkt_sept_2021, "monthly_vacc_rate", title = "Sept 2021", fill.palette="Greens")
qtm(jkt_oct_2021, "monthly_vacc_rate", title = "Oct 2021", fill.palette="Greens")
qtm(jkt_nov_2021, "monthly_vacc_rate", title = "Nov 2021", fill.palette="Greens")
qtm(jkt_dec_2021, "monthly_vacc_rate", title = "Dec 2021", fill.palette="Greens")
qtm(jkt_jan_2022, "monthly_vacc_rate", title = "Jan 2022", fill.palette="Greens")
qtm(jkt_feb_2022, "monthly_vacc_rate", title = "Feb 2022", fill.palette="Greens")
qtm(jkt_mar_2022, "monthly_vacc_rate", title = "Mar 2022", fill.palette="Greens")
qtm(jkt_apr_2022, "monthly_vacc_rate", title = "Apr 2022", fill.palette="Greens")
qtm(jkt_may_2022, "monthly_vacc_rate", title = "May 2022", fill.palette="Greens")
qtm(jkt_june_2022, "monthly_vacc_rate", title = "June 2022", fill.palette="Greens")
```

## Spatial Patterns

Over the year, the monthly vaccination rate has been on an overall increase as seen in the legend where the minimum rate rises from 0.10 in July 2021 to 0.6 in June 2022.

Sub-district with consistently high monthly vaccination rates (relative to other areas) is Kelapa Gading Timur. Whereas the sub-district with consistently low monthly rates (relative to other areas) includes Kebon Melati and Petamburan.

March 2022 had the highest monthly vaccination rates.

Overall, excluding the areas with missing values, by October 2021, the monthly vaccination rate across Jakarta has been meeting half of the targeted numbers and has only been increasing since.

# Local Gi\* Analysis

## Computing Local Gi\* of Monthly Vaccination Rate

To compute local Gi\* statistics, it requires the neighbour list (using `st_contiguity()`) and the wts (using `st_inverse_distance()`).

Using `jkt_july_2021` as an example:

```{r}
jkt_july_2021 = jkt_july_2021 %>% drop_na(monthly_vacc_rate)
jkt_july_2021_idw <- jkt_july_2021 %>%
  mutate(
    nb = st_contiguity(geometry),
    wts = st_inverse_distance(
      nb, geometry, scale = 1, alpha = 1
    ),
  .before = 1
  )
```

::: callout-note
There are 'NA' values in the `monthly_vacc_rate`Â column due to missing Kelurahans of the two datasets. These rows need to be dropped to compute the nb and wts.
:::

Next, calculate the local Gi\* values using `local_gstar_perm()` with the nb and wt values computed in the previous step. Add the local Gi\* values into a new sf dataset `HCSA_july_2021` as a new column with the `mutate()` function, adding `.before = 1` to place the new column as the first column. The `unnest()` function is used to make each element of the `local_Gi` list its own row.

```{r}
HCSA_july_2021 <- jkt_july_2021_idw %>% 
  mutate(local_Gi = local_gstar_perm(
    monthly_vacc_rate, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_Gi)
HCSA_july_2021
```

## Displaying Gi\* Maps

Using the plot mode, plot out both the Gi\* Map and the p-value of Gi\* using the `HCDA_july_2021` sf dataset containing the newly added Gi\* values. I will be using the "-RdBu" palette to better visualise the extreme positive and negative Gi\* values which represents the hot and cold spot clusters respectively.

```{r}
tmap_mode("plot")
map1 <- tm_shape(HCSA_july_2021) +
  tm_fill("gi_star", palette = "-RdBu") + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Gi* of July 2021",
            main.title.size = 0.8)

map2 <- tm_shape(HCSA_july_2021) +
  tm_fill("p_value",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig"), palette = "-Greens") + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of Gi*",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

## Other Months

Repeat the previous steps to the other 11 months.

### August 2021

```{r}
#| code-fold: true
jkt_aug_2021 = jkt_aug_2021 %>% drop_na(monthly_vacc_rate)
jkt_aug_2021_idw <- jkt_aug_2021 %>%
  mutate(
    nb = st_contiguity(geometry),
    wts = st_inverse_distance(
      nb, geometry, scale = 1, alpha = 1
    ),
  .before = 1
  )

HCSA_aug_2021 <- jkt_aug_2021_idw %>% 
  mutate(local_Gi = local_gstar_perm(
    monthly_vacc_rate, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_Gi)

tmap_mode("plot")
map1 <- tm_shape(HCSA_aug_2021) +
  tm_fill("gi_star", palette = "-RdBu") + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Gi* of August 2021",
            main.title.size = 0.8)

map2 <- tm_shape(HCSA_aug_2021) +
  tm_fill("p_value",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig"), palette = "-Greens") + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of Gi*",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

### September 2021

```{r}
#| code-fold: true
jkt_sept_2021 = jkt_sept_2021 %>% drop_na(monthly_vacc_rate)
jkt_sept_2021_idw <- jkt_sept_2021 %>%
  mutate(
    nb = st_contiguity(geometry),
    wts = st_inverse_distance(
      nb, geometry, scale = 1, alpha = 1
    ),
  .before = 1
  )

HCSA_sept_2021 <- jkt_sept_2021_idw %>% 
  mutate(local_Gi = local_gstar_perm(
    monthly_vacc_rate, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_Gi)

tmap_mode("plot")
map1 <- tm_shape(HCSA_sept_2021) +
  tm_fill("gi_star", palette = "-RdBu") + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Gi* of September 2021",
            main.title.size = 0.8)

map2 <- tm_shape(HCSA_sept_2021) +
  tm_fill("p_value",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig"), palette = "-Greens") + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of Gi*",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

### October 2021

```{r}
#| code-fold: true
jkt_oct_2021 = jkt_oct_2021 %>% drop_na(monthly_vacc_rate)
jkt_oct_2021_idw <- jkt_oct_2021 %>%
  mutate(
    nb = st_contiguity(geometry),
    wts = st_inverse_distance(
      nb, geometry, scale = 1, alpha = 1
    ),
  .before = 1
  )

HCSA_oct_2021 <- jkt_oct_2021_idw %>% 
  mutate(local_Gi = local_gstar_perm(
    monthly_vacc_rate, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_Gi)

tmap_mode("plot")
map1 <- tm_shape(HCSA_oct_2021) +
  tm_fill("gi_star", palette = "-RdBu") + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Gi* of October 2021",
            main.title.size = 0.8)

map2 <- tm_shape(HCSA_oct_2021) +
  tm_fill("p_value",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig"), palette = "-Greens") + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of Gi*",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

### November 2021

```{r}
#| code-fold: true
jkt_nov_2021 = jkt_nov_2021 %>% drop_na(monthly_vacc_rate)
jkt_nov_2021_idw <- jkt_nov_2021 %>%
  mutate(
    nb = st_contiguity(geometry),
    wts = st_inverse_distance(
      nb, geometry, scale = 1, alpha = 1
    ),
  .before = 1
  )

HCSA_nov_2021 <- jkt_nov_2021_idw %>% 
  mutate(local_Gi = local_gstar_perm(
    monthly_vacc_rate, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_Gi)

tmap_mode("plot")
map1 <- tm_shape(HCSA_nov_2021) +
  tm_fill("gi_star", palette = "-RdBu") + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Gi* of November 2021",
            main.title.size = 0.8)

map2 <- tm_shape(HCSA_nov_2021) +
  tm_fill("p_value",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig"), palette = "-Greens") + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of Gi*",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

### December 2021

```{r}
#| code-fold: true
jkt_dec_2021 = jkt_dec_2021 %>% drop_na(monthly_vacc_rate)
jkt_dec_2021_idw <- jkt_dec_2021 %>%
  mutate(
    nb = st_contiguity(geometry),
    wts = st_inverse_distance(
      nb, geometry, scale = 1, alpha = 1
    ),
  .before = 1
  )

HCSA_dec_2021 <- jkt_dec_2021_idw %>% 
  mutate(local_Gi = local_gstar_perm(
    monthly_vacc_rate, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_Gi)

tmap_mode("plot")
map1 <- tm_shape(HCSA_dec_2021) +
  tm_fill("gi_star", palette = "-RdBu") + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Gi* of December 2021",
            main.title.size = 0.8)

map2 <- tm_shape(HCSA_dec_2021) +
  tm_fill("p_value",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig"), palette = "-Greens") + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of Gi*",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

### January 2022

```{r}
#| code-fold: true
jkt_jan_2022 = jkt_jan_2022 %>% drop_na(monthly_vacc_rate)
jkt_jan_2022_idw <- jkt_jan_2022 %>%
  mutate(
    nb = st_contiguity(geometry),
    wts = st_inverse_distance(
      nb, geometry, scale = 1, alpha = 1
    ),
  .before = 1
  )

HCSA_jan_2022 <- jkt_jan_2022_idw %>% 
  mutate(local_Gi = local_gstar_perm(
    monthly_vacc_rate, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_Gi)

tmap_mode("plot")
map1 <- tm_shape(HCSA_jan_2022) +
  tm_fill("gi_star", palette = "-RdBu") + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Gi* of January 2022",
            main.title.size = 0.8)

map2 <- tm_shape(HCSA_jan_2022) +
  tm_fill("p_value",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig"), palette = "-Greens") + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of Gi*",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

### February 2022

```{r}
#| code-fold: true
jkt_feb_2022 = jkt_feb_2022 %>% drop_na(monthly_vacc_rate)
jkt_feb_2022_idw <- jkt_feb_2022 %>%
  mutate(
    nb = st_contiguity(geometry),
    wts = st_inverse_distance(
      nb, geometry, scale = 1, alpha = 1
    ),
  .before = 1
  )

HCSA_feb_2022 <- jkt_feb_2022_idw %>% 
  mutate(local_Gi = local_gstar_perm(
    monthly_vacc_rate, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_Gi)

tmap_mode("plot")
map1 <- tm_shape(HCSA_feb_2022) +
  tm_fill("gi_star", palette = "-RdBu") + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Gi* of February 2022",
            main.title.size = 0.8)

map2 <- tm_shape(HCSA_feb_2022) +
  tm_fill("p_value",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig"), palette = "-Greens") + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of Gi*",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

### March 2022

```{r}
#| code-fold: true
jkt_mar_2022 = jkt_mar_2022 %>% drop_na(monthly_vacc_rate)
jkt_mar_2022_idw <- jkt_mar_2022 %>%
  mutate(
    nb = st_contiguity(geometry),
    wts = st_inverse_distance(
      nb, geometry, scale = 1, alpha = 1
    ),
  .before = 1
  )

HCSA_mar_2022 <- jkt_mar_2022_idw %>% 
  mutate(local_Gi = local_gstar_perm(
    monthly_vacc_rate, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_Gi)

tmap_mode("plot")
map1 <- tm_shape(HCSA_mar_2022) +
  tm_fill("gi_star", palette = "-RdBu") + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Gi* of March 2022",
            main.title.size = 0.8)

map2 <- tm_shape(HCSA_mar_2022) +
  tm_fill("p_value",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig"), palette = "-Greens") + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of Gi*",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

### April 2022

```{r}
#| code-fold: true
jkt_apr_2022 = jkt_apr_2022 %>% drop_na(monthly_vacc_rate)
jkt_apr_2022_idw <- jkt_apr_2022 %>%
  mutate(
    nb = st_contiguity(geometry),
    wts = st_inverse_distance(
      nb, geometry, scale = 1, alpha = 1
    ),
  .before = 1
  )

HCSA_apr_2022 <- jkt_apr_2022_idw %>% 
  mutate(local_Gi = local_gstar_perm(
    monthly_vacc_rate, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_Gi)

tmap_mode("plot")
map1 <- tm_shape(HCSA_apr_2022) +
  tm_fill("gi_star", palette = "-RdBu") + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Gi* of April 2022",
            main.title.size = 0.8)

map2 <- tm_shape(HCSA_apr_2022) +
  tm_fill("p_value",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig"), palette = "-Greens") + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of Gi*",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

### May 2022

```{r}
#| code-fold: true
jkt_may_2022 = jkt_may_2022 %>% drop_na(monthly_vacc_rate)
jkt_may_2022_idw <- jkt_may_2022 %>%
  mutate(
    nb = st_contiguity(geometry),
    wts = st_inverse_distance(
      nb, geometry, scale = 1, alpha = 1
    ),
  .before = 1
  )

HCSA_may_2022 <- jkt_may_2022_idw %>% 
  mutate(local_Gi = local_gstar_perm(
    monthly_vacc_rate, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_Gi)

tmap_mode("plot")
map1 <- tm_shape(HCSA_may_2022) +
  tm_fill("gi_star", palette = "-RdBu") + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Gi* of May 2022",
            main.title.size = 0.8)

map2 <- tm_shape(HCSA_may_2022) +
  tm_fill("p_value",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig"), palette = "-Greens") + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of Gi*",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

### June 2022

```{r}
#| code-fold: true
jkt_june_2022 = jkt_june_2022 %>% drop_na(monthly_vacc_rate)
jkt_june_2022_idw <- jkt_june_2022 %>%
  mutate(
    nb = st_contiguity(geometry),
    wts = st_inverse_distance(
      nb, geometry, scale = 1, alpha = 1
    ),
  .before = 1
  )

HCSA_june_2022 <- jkt_june_2022_idw %>% 
  mutate(local_Gi = local_gstar_perm(
    monthly_vacc_rate, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_Gi)

tmap_mode("plot")
map1 <- tm_shape(HCSA_june_2022) +
  tm_fill("gi_star", palette = "-RdBu") + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Gi* of June 2022",
            main.title.size = 0.8)

map2 <- tm_shape(HCSA_june_2022) +
  tm_fill("p_value",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig"), palette = "-Greens") + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of Gi*",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

## Statistical Conclusion

At the start of the year, the hot and cold spots were spreaded across the sub-districts. But overtime, the Gi\* value bottom half of Jakarta has been significantly more positive. More specifically areas such as Jagakarsa, Ciganjur and their neighbours have been a extremely significant positive cluster especially at the later half of the year. This means that these sub-districts contains the highest monthly vaccination rates as a cluster as compared to other sub-district areas.

Kebon Melati has been a significant cold spot consistently throughout the year. Its neighbouring sub-districts are also visualised as cold spots throughout the year but is less significant than Kebon Melati itself. This means that Kebon Melati and its surrounding neighbours contains significantly lower monthly vaccination rates as a cluster as compared to other sub-district areas.

# Emerging Hot Spot Analysis

## Mann-Kendall Test

To perform the Mann-Kendall test, a time series cube needs to be created first.

### Creating Time Series Cube

Since the `spacetime()` function only accepts the location column of 2 datasets to be the same, I will update the `jkt` "KESA" column to "KELURAHAN" for standardisation using the `colnames()` function.

```{r}
colnames(jkt)[3] <- "KELURAHAN"
```

Next, using the `spacetime()` function, create a spacetime object with "KELURAHAN" as the location column and "dateMonth" as the time column.

```{r, warning=TRUE}
#vacc_data = vacc_data %>% drop_na(c("KODE KELURAHAN", "WILAYAH KOTA", "KECAMATAN"))
#vacc_data_st <- spacetime(vacc_data, jkt, ".KELURAHAN", "dateMonth")
vacc_data_st <- spacetime(
  .data = vacc_data, 
  .geometry = jkt, 
  .loc_col = "KELURAHAN", 
  .time_col = "dateMonth")
```

There are missing values in the spacetime object. It will not be a spacetime cube due to the lack of rows. Using `complete_spacetime_cube()` function, create a completed spacetime cube `vacc_data_st_complete`.

```{r, warning=TRUE}
vacc_data_st_complete <- complete_spacetime_cube(vacc_data_st)
```

```{r}
is_spacetime_cube(vacc_data_st_complete)
```

Now the spacetime cube is valid.

### Computing Spatial Weights

Before implementing the Mann-Kendall test, we need the nb and wt which will be computed similarly to the method use in the previous sections.

```{r}
vacc_st_nb <- vacc_data_st_complete %>%
  activate("geometry") %>%
  mutate(nb = include_self(st_contiguity(geometry)),
         wt = st_inverse_distance(nb, geometry,
                                  scale = 1,
                                  alpha = 1),
         .before = 1) %>%
  set_nbs("nb") %>%
  set_wts("wt")
```

```{r}
head(vacc_st_nb)
```

### Computing Gi\*

Next, I will calculate the Gi\* value and add it into a new dataframe called `gi_stars`. Since there are missing values in the `monthly_vacc_rate`, I will drop the empty rows before calulating the Gi\* values with the same method as the previous section.

```{r}
vacc_st_nb <- vacc_st_nb %>% drop_na("monthly_vacc_rate")
gi_stars <- vacc_st_nb %>% 
  mutate(gi_star = local_gstar_perm(
    monthly_vacc_rate, nb, wt)) %>% 
  unnest(gi_star)
```

### Mann-Kendall Test

To perform the Mann-Kendall test, I will call the `MannKendall()` function on the newly calculated Gi\* values into a list `mk`. I will then add this computed results into a new dataframe `ehsa`.

```{r}
ehsa <- gi_stars %>%
  group_by(KELURAHAN) %>%
  summarise(mk = list(
    unclass(MannKendall(gi_star)))) %>%
  tidyr::unnest_wider(mk)
```

## Temporal Trends

As mentioned in Section 3.3 Spatial Patterns, a few sub-districts with significant changes are: Jagakarsa, Ciganjur, and Kebon Melati. Out of curiousity, I will first be performing a temporal trend analysis on Ciganjur. For the remaining 2 sub-districts, I will be using the top 2 emerging sub-districts, where their p-values are the highest.

### CIGANJUR

```{r}
cgj <- gi_stars %>% 
  filter(KELURAHAN == "CIGANJUR") |> 
  select(KELURAHAN, dateMonth, gi_star)

ggplot(data = cgj, 
       aes(x = dateMonth, 
           y = gi_star)) +
  geom_line() +
  theme_light()+
  ggtitle("Ciganjur Temporal Trend")
```

#### Significance and Conclusion

```{r}
ehsa %>% 
  filter(KELURAHAN == "CIGANJUR")
```

Using the calculated Mann-Kendall test, the p-value (sl column) of the trend in monthly vaccination rate in Ciganjur is 0.00079 (2 s.f.), stating that this upward trend is extremely significant.

### Emerging Sub-districts

To calculate the emerging sub-districts, use the `arrange()` function and arrange it via the p-value (sl) column and test statistics (tau) column.

```{r}
emerging <- ehsa %>% 
  arrange(sl, abs(tau)) %>% 
  slice(1:5)
```

```{r}
head(emerging, n=2)
```

For the remaining 2 sub-districts, I will be using Tugu Selatan and Jelambar to perform the temporal trend analysis.

### Tugu Selatan

```{r}
tgslt <- gi_stars %>% 
  filter(KELURAHAN == "TUGU SELATAN") |> 
  select(KELURAHAN, dateMonth, gi_star)

ggplot(data = tgslt, 
       aes(x = dateMonth, 
           y = gi_star)) +
  geom_line() +
  theme_light() +
  ggtitle("Tugu Selatan Temporal Trend")
```

#### Significance and Conclusion

```{r}
ehsa %>% 
  filter(KELURAHAN == "TUGU SELATAN")
```

There is an overall significant upward trend from July 2021 to June 2022 with a slight decrease around the October 2021 period.

### Jelambar

```{r}
jlb <- gi_stars %>% 
  filter(KELURAHAN == "JELAMBAR") |> 
  select(KELURAHAN, dateMonth, gi_star)

ggplot(data = jlb, 
       aes(x = dateMonth, 
           y = gi_star)) +
  geom_line() +
  theme_light() +
  ggtitle("Jelambar Temporal Trend")
```

#### Significance and Conclusion

```{r}
ehsa %>% 
  filter(KELURAHAN == "JELAMBAR")
```

There is an overall significant upward trend from July 2021 to June 2022 with an exponential increase from August 2021 to January 2022.

## EHSA Map

Lastly, I will run a emerging hotspot analysis using `emerging_hotspot_analysis()` function on the "monthly_vacc_rate" variable of the completed spacetime cube, running for 100 tests.

```{r}
vacc_data_st_complete$monthly_vacc_rate[is.na(vacc_data_st_complete$monthly_vacc_rate)] <- 0
ehsa <- emerging_hotspot_analysis(
  x = vacc_data_st_complete, 
  .var = "monthly_vacc_rate", 
  k = 1, 
  nsim = 99
)
```

I will then combine the computed `ehsa` into the `jkt` shapefile using the `left_join()` function with columns "KELURAHAN" from `jkt` and "location" from `ehsa`.

```{r}
jkt_ehsa <- jkt %>%
  left_join(ehsa, by = c("KELURAHAN" = "location" ))
```

To plot out the significant emerging hotspot analysis results, I will filter out the results that have p-values lesser than 0.05 with the `filter()` function.

```{r}
ehsa_sig <- jkt_ehsa  %>%
  filter(p_value < 0.05)
tmap_mode("view")
tm_shape(jkt_ehsa) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
  tm_text("KELURAHAN", size = 0.7) +
tm_shape(ehsa_sig) +
  tm_fill("classification") + 
  tm_borders(alpha = 0.4) +
  tm_view(set.zoom.limits = c(11,14))
```

## Spatial Patterns

Majority of the sub-districts have a classification of oscillating hotspot. This aligns with the previous Local Gi\* maps with the bottom half being majority of the hotspot.

Some notable sub-districts include:

-   Petojo Utara: Persistent coldspot

-   Pademangan Timur: Intensifying hotspot

It is interesting how the areas I have mentioned to be significant earlier not remotely near the 2 sub-districts computed to be significant here.

# Conclusion

For each test, there were different sub-districts that I perceived or was computed to be significant. It was different for every single test which made me realise the importance of doing multiple tests to have a better understanding of the data I am handling.
