[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "inclass_ex/ICE2/ice2.html",
    "href": "inclass_ex/ICE2/ice2.html",
    "title": "In-Class Exercise 2: Geospatial Data Wrangling",
    "section": "",
    "text": "pacman::p_load(sf, tidyverse, funModeling)\n\nImporting WPdx+ (Nigeria) data set\n\nwp_nga <- read_csv(\"data/aspatial/wpdx.csv\")\n\nCreating Feature Data Frame for WPDX\n\n#wp_nga$Geometry = st_as_sfc(wp_nga$`New Georeferenced Column`)\n\n\nwp_nga\n\n# A tibble: 1,000 × 70\n   row_id source     lat_deg lon_deg report_date         statu…¹ water…² water…³\n    <dbl> <chr>        <dbl>   <dbl> <dttm>              <chr>   <chr>   <chr>  \n 1 429068 GRID3         7.98    5.12 2018-08-29 00:00:00 Unknown <NA>    <NA>   \n 2 222071 Federal M…    6.96    3.60 2015-08-16 00:00:00 Yes     Boreho… Well   \n 3 160612 WaterAid      6.49    7.93 2020-12-04 00:00:00 Yes     Boreho… Well   \n 4 160669 WaterAid      6.73    7.65 2020-12-04 00:00:00 Yes     Boreho… Well   \n 5 160642 WaterAid      6.78    7.66 2020-12-04 00:00:00 Yes     Boreho… Well   \n 6 160628 WaterAid      6.96    7.78 2020-12-04 00:00:00 Yes     Boreho… Well   \n 7 160632 WaterAid      7.02    7.84 2020-12-04 00:00:00 Yes     Boreho… Well   \n 8 642747 Living Wa…    7.33    8.98 2016-10-03 00:00:00 Yes     Boreho… Well   \n 9 642456 Living Wa…    7.17    9.11 2016-10-03 00:00:00 Yes     Boreho… Well   \n10 641347 Living Wa…    7.20    9.22 2015-03-28 00:00:00 Yes     Boreho… Well   \n# … with 990 more rows, 62 more variables: water_tech_clean <chr>,\n#   `_water_tech_category` <chr>, facility_type <chr>,\n#   clean_country_name <chr>, clean_adm1 <chr>, clean_adm2 <chr>,\n#   clean_adm3 <lgl>, clean_adm4 <lgl>, install_year <dbl>, installer <chr>,\n#   rehab_year <lgl>, rehabilitator <lgl>, management_clean <chr>,\n#   status_clean <chr>, pay <chr>, fecal_coliform_presence <lgl>,\n#   fecal_coliform_value <dbl>, subjective_quality <chr>, activity_id <chr>, …\n\n\n\n#wp_sf <- st_sf(wp_nga, crs = 4326)\n#wp_sf\n\n\n\n\nBoth sets of geospatial data are imported with the correct CRS of 26392.\n\ngeoNGA = st_read(dsn=\"data/geospatial/geoboundaries_nga\", \n                 layer = \"geoBoundaries-NGA-ADM2\") %>%\n  st_transform(crs = 26392)\n\nReading layer `geoBoundaries-NGA-ADM2' from data source \n  `D:\\bellekwang\\IS415\\inclass_ex\\ICE2\\data\\geospatial\\geoboundaries_nga' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\n\nNGA <- st_read(\"data/geospatial/NGA_cnty_admin2\",\n               layer = \"nga_polbndl_adm2_1m_salb\") %>%\n  st_transform(crs = 26392)\n\nReading layer `nga_polbndl_adm2_1m_salb' from data source \n  `D:\\bellekwang\\IS415\\inclass_ex\\ICE2\\data\\geospatial\\NGA_cnty_admin2' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1685 features and 1 field\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 2.744192 ymin: 4.363015 xmax: 14.57926 ymax: 13.90103\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\n\n#NGA <- NGA %>%\n  #select(c(3:4, 8:9))\n\n\n\n\n\n#wpdx_sf %>%\n # group_by(water_source_clean) %>%\n  #summarise(n = n()) %>%\n  #mutate(freq = n / sum(n))"
  },
  {
    "objectID": "handson_ex/HE3/HE3.html",
    "href": "handson_ex/HE3/HE3.html",
    "title": "Hands-on Exercise 3: Cloropleth Mapping with R",
    "section": "",
    "text": "pacman::p_load(sf, tmap, tidyverse)\n\nWarning: unable to access index for repository http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.2:\n  cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.2/PACKAGES'\n\n\npackage 'tmap' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\kwang\\AppData\\Local\\Temp\\Rtmp4AzRWp\\downloaded_packages\n\n\n\ntmap installed\n\n\nWarning in pacman::p_load(sf, tmap, tidyverse): Failed to install/load:\ntmap\n\n\n\nImporting Data\nImporting Geospatial Data\n\nmpsz <- st_read(\n  dsn='data/geospatial',\n  layer='MP14_SUBZONE_WEB_PL'\n)\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\bellekwang\\IS415\\handson_ex\\HE3\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\nImporting Attribute Data\n\npopdata <- read_csv('data/aspatial/respopagesextod2011to2020.csv')\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nData Wrangling\n\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()%>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\n\n\nJoining Attribute and Geospatial Data"
  },
  {
    "objectID": "inclass_ex/ICE3/ice3.html",
    "href": "inclass_ex/ICE3/ice3.html",
    "title": "In-class Exercise 3: Analytical Mappping",
    "section": "",
    "text": "Installing and loading packages\n\npacman::p_load(sf, tidyverse, tmap)\n\n\n\n\nNGA_wp <- read_rds(\"data/rds/NGA_wp.rds\")"
  },
  {
    "objectID": "inclass_ex/ICE3/ice3.html#basic-choropleth-mapping",
    "href": "inclass_ex/ICE3/ice3.html#basic-choropleth-mapping",
    "title": "In-class Exercise 3: Analytical Mappping",
    "section": "2 Basic Choropleth Mapping",
    "text": "2 Basic Choropleth Mapping\n\n2.1 Visualising Distribution of Non-functional Water Point\n\np1 <- tm_shape(NGA_wp) +\n  tm_fill(\"wp_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of functional water points by LGAs\",\n            legend.outside = FALSE)\n\n\np2 <- tm_shape(NGA_wp) +\n  tm_fill(\"total_wp\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of total water points by LGA\",\n            legend.outside = FALSE)\n\n\ntmap_arrange(p2, p1, nrow=1)"
  },
  {
    "objectID": "inclass_ex/ICE3/ice3.html#choropleth-map-for-rates",
    "href": "inclass_ex/ICE3/ice3.html#choropleth-map-for-rates",
    "title": "In-class Exercise 3: Analytical Mappping",
    "section": "3 Choropleth Map for Rates",
    "text": "3 Choropleth Map for Rates\n\n3.1 Deriving Proportion of Functional and Non-Functional Water Points\n\nNGA_wp <- NGA_wp %>%\n  mutate(pct_functional = wp_functional/total_wp) %>%\n  mutate(pct_nonfunctional = wp_nonfunctional/total_wp)\n\n\n\n3.2 Plotting Map of Rate\n\ntm_shape(NGA_wp) +\n  tm_fill(\"pct_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\",\n          legend.hist = TRUE) +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Rate map of functional water points by LGA\",\n            legend.outside = TRUE)"
  },
  {
    "objectID": "inclass_ex/ICE3/ice3.html#extreme-value-maps",
    "href": "inclass_ex/ICE3/ice3.html#extreme-value-maps",
    "title": "In-class Exercise 3: Analytical Mappping",
    "section": "4 Extreme Value Maps",
    "text": "4 Extreme Value Maps\n\n4.1 Percentile Map\nExclude NA records\n\nNGA_wp <- NGA_wp %>%\n  drop_na()\n\nCreate customised classification and extracting values\n\npercent <- c(0, .01, .1, .5, .9, .99, 1)\nvar <- NGA_wp[\"pct_functional\"] %>%\n  st_set_geometry(NULL)\nquantile(var[, 1], percent)\n\n       0%        1%       10%       50%       90%       99%      100% \n0.0000000 0.0000000 0.2169811 0.4791667 0.8611111 1.0000000 1.0000000 \n\n\n\n\n4.2 get.var Function\n\nget.var <- function(vname, df) {\n  v <- df[vname] %>%\n    st_set_geometry(NULL)\n  v <- unname(v[, 1])\n  return(v)\n}\n\n\n\n4.3 Percentile Mapping Function\n\npercentmap <- function(vnam, df, legtitle = NA, mtitle = \"Percentile Map\"){\n  percent <- c(0, .01, .1, .5, .9, .99, 1)\n  var <- get.var(vnam, df)\n  bperc <- quantile(var, percent)\n  tm_shape(df) +\n  tm_polygons() +\n  tm_shape(df) +\n    tm_fill(vnam,\n            title = legtitle,\n            breaks = bperc,\n            palette = \"Blues\",\n            labels = c(\"< 1%\", \"1% - 10%\", \"10% - 50%\", \"50% - 90%\", \"90%- 99%\", \"> 99%\")) +\n    tm_borders() +\n    tm_layout(main.title = mtitle,\n              title.position = c(\"right\", \"bottom\"))\n}\n\nTesting out the function\n\npercentmap(\"total_wp\", NGA_wp)\n\n\n\n\n\n\n4.4 Box Map\n\nggplot(data = NGA_wp,\n       aes(x = \"\",\n           y = wp_nonfunctional)) +\n  geom_boxplot()\n\n\n\n\n\n\n4.5 Boxbreak Function\n\nboxbreaks <- function(v,mult=1.5) {\n  qv <- unname(quantile(v))\n  iqr <- qv[4] - qv[2]\n  upfence <- qv[4] + mult * iqr\n  lofence <- qv[2] - mult * iqr\n  # initialize break points vector\n  bb <- vector(mode=\"numeric\",length=7)\n  # logic for lower and upper fences\n  if (lofence < qv[1]) {  # no lower outliers\n    bb[1] <- lofence\n    bb[2] <- floor(qv[1])\n  } else {\n    bb[2] <- lofence\n    bb[1] <- qv[1]\n  }\n  if (upfence > qv[5]) { # no upper outliers\n    bb[7] <- upfence\n    bb[6] <- ceiling(qv[5])\n  } else {\n    bb[6] <- upfence\n    bb[7] <- qv[5]\n  }\n  bb[3:5] <- qv[2:4]\n  return(bb)\n}\n\n\n\n4.6 Boxmap function\n\nboxmap <- function(vnam, df, \n                   legtitle=NA,\n                   mtitle=\"Box Map\",\n                   mult=1.5){\n  var <- get.var(vnam,df)\n  bb <- boxbreaks(var)\n  tm_shape(df) +\n    tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,title=legtitle,\n             breaks=bb,\n             palette=\"Blues\",\n          labels = c(\"lower outlier\", \n                     \"< 25%\", \n                     \"25% - 50%\", \n                     \"50% - 75%\",\n                     \"> 75%\", \n                     \"upper outlier\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"left\",\n                               \"top\"))\n}\n\n\ntmap_mode(\"plot\")\nboxmap(\"wp_nonfunctional\", NGA_wp)"
  },
  {
    "objectID": "inclass_ex/ICE3/ice3.html#recode-zero",
    "href": "inclass_ex/ICE3/ice3.html#recode-zero",
    "title": "In-class Exercise 3: Analytical Mappping",
    "section": "5 Recode Zero",
    "text": "5 Recode Zero\n\nNGA_wp <- NGA_wp %>%\n  mutate(wp_functional = na_if(\n    total_wp, total_wp < 0))"
  },
  {
    "objectID": "handson_ex/HE4/HE4.html",
    "href": "handson_ex/HE4/HE4.html",
    "title": "Hands-on Exercise 4 & 5: 1st & 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "",
    "text": "pacman::p_load(maptools, sf, raster, spatstat, tmap, tidyr, dplyr)"
  },
  {
    "objectID": "handson_ex/HE4/HE4.html#data-wrangling",
    "href": "handson_ex/HE4/HE4.html#data-wrangling",
    "title": "Hands-on Exercise 4 & 5: 1st & 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "2 Data Wrangling",
    "text": "2 Data Wrangling\n\n2.1 Spatial Data\n\n2.1.1 Importing the Spatial Data\n\nchildcare_sf <- st_read(dsn = \"data/child-care-services-geojson.geojson\") %>%\n  st_transform(crs = 3414)\n\nReading layer `child-care-services-geojson' from data source \n  `D:\\bellekwang\\IS415\\handson_ex\\HE4\\data\\child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nsg_sf <- st_read(dsn = \"data\", layer = \"CostalOutline\")\n\nReading layer `CostalOutline' from data source \n  `D:\\bellekwang\\IS415\\handson_ex\\HE4\\data' using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\n\n\nmpsz_sf <- st_read(dsn = \"data\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\bellekwang\\IS415\\handson_ex\\HE4\\data' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nChecking CRS of each simple features data frame\n\nst_crs(childcare_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\nst_crs(mpsz_sf)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\nst_crs(sg_sf)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nUpdating CRS on mpsz_sf and sg_sf\n\nmpsz_sf <- st_transform(mpsz_sf, crs = 3414)\n\n\nst_crs(mpsz_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\nsg_sf <- st_transform(sg_sf, crs = 3414)\n\n\nst_crs(sg_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]"
  },
  {
    "objectID": "handson_ex/HE4/HE4.html#mapping-geospatial-data-sets",
    "href": "handson_ex/HE4/HE4.html#mapping-geospatial-data-sets",
    "title": "Hands-on Exercise 4 & 5: 1st & 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "3 Mapping Geospatial Data Sets",
    "text": "3 Mapping Geospatial Data Sets\n\n3.1 Childcare Data\n\ntmap_mode('plot')\ntm_shape(childcare_sf)+\n  tm_dots(alph=0.5, size=0.01)+\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\ntmap_mode('view')\ntm_shape(childcare_sf)+\n  tm_dots()"
  },
  {
    "objectID": "handson_ex/HE4/HE4.html#geospatial-data-wrangling",
    "href": "handson_ex/HE4/HE4.html#geospatial-data-wrangling",
    "title": "Hands-on Exercise 4 & 5: 1st & 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "4 Geospatial Data Wrangling",
    "text": "4 Geospatial Data Wrangling\n\n4.1 Conversion to Spatial Point/Polygon Data Frame\n\nchildcare <- as_Spatial(childcare_sf)\nmpsz <- as_Spatial(mpsz_sf)\nsg <- as_Spatial(sg_sf)\n\n\nchildcare\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       :    Nameescription \nmin values  :   kml_1, <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>018989</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>1, MARINA BOULEVARD, #B1 - 01, ONE MARINA BOULEVARD, SINGAPORE 018989</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>THE LITTLE SKOOL-HOUSE INTERNATIONAL PTE. LTD.</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>08F73931F4A691F4</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200826094036</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center> \nmax values  : kml_999,                  <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>829646</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>200, PONGGOL SEVENTEENTH AVENUE, SINGAPORE 829646</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td>Child Care Services</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>RAFFLES KIDZ @ PUNGGOL PTE LTD</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>379D017BF244B0FA</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200826094036</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center> \n\n\n\nmpsz\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 323 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 15\nnames       : OBJECTID, SUBZONE_NO, SUBZONE_N, SUBZONE_C, CA_IND, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C,          INC_CRC, FMEL_UPD_D,     X_ADDR,     Y_ADDR,    SHAPE_Leng,    SHAPE_Area \nmin values  :        1,          1, ADMIRALTY,    AMSZ01,      N, ANG MO KIO,         AM, CENTRAL REGION,       CR, 00F5E30B5C9B7AD8,      16409,  5092.8949,  19579.069, 871.554887798, 39437.9352703 \nmax values  :      323,         17,    YUNNAN,    YSSZ09,      Y,     YISHUN,         YS,    WEST REGION,       WR, FFCCF172717C2EAF,      16409, 50424.7923, 49552.7904, 68083.9364708,  69748298.792 \n\n\n\nsg\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 4\nnames       : GDO_GID, MSLINK, MAPID,              COSTAL_NAM \nmin values  :       1,      1,     0,             ISLAND LINK \nmax values  :      60,     67,     0, SINGAPORE - MAIN ISLAND \n\n\n\n\n4.2 Conversion from Spatial Classes to Spatial Objects\n\nchildcare_sp <- as(childcare, \"SpatialPoints\")\nsg_sp <- as(sg, \"SpatialPolygons\")\n\n\nchildcare_sp\n\nclass       : SpatialPoints \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nsg_sp\n\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\n\n4.3 Conversion from Spatial Object to ppp Format (spatstat)\n\nchildcare_ppp <- as(childcare_sp, \"ppp\")\nchildcare_ppp\n\nPlanar point pattern: 1545 points\nwindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n\n\n\nplot(childcare_ppp)\n\n\n\n\n\nsummary(childcare_ppp)\n\nPlanar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units\n\n\n\n\n4.4 Jittering Duplicate Points\nCheck for any duplicate points\n\nany(duplicated(childcare_ppp))\n\n[1] TRUE\n\n\nCheck the number of duplications\n\nsum(multiplicity(childcare_ppp) > 1)\n\n[1] 128\n\n\nJitter the duplicate points\n\nchildcare_ppp_jit <- rjitter(childcare_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n\nCheck for duplicate points\n\nany(duplicated(childcare_ppp_jit))\n\n[1] FALSE\n\n\n\n\n4.5 Creating owin Object\n\nsg_owin <- as(sg_sp, \"owin\")\n\n\nplot(sg_owin)\n\n\n\n\n\nsummary(sg_owin)\n\nWindow: polygonal boundary\n60 separate polygons (no holes)\n            vertices        area relative.area\npolygon 1         38 1.56140e+04      2.09e-05\npolygon 2        735 4.69093e+06      6.27e-03\npolygon 3         49 1.66986e+04      2.23e-05\npolygon 4         76 3.12332e+05      4.17e-04\npolygon 5       5141 6.36179e+08      8.50e-01\npolygon 6         42 5.58317e+04      7.46e-05\npolygon 7         67 1.31354e+06      1.75e-03\npolygon 8         15 4.46420e+03      5.96e-06\npolygon 9         14 5.46674e+03      7.30e-06\npolygon 10        37 5.26194e+03      7.03e-06\npolygon 11        53 3.44003e+04      4.59e-05\npolygon 12        74 5.82234e+04      7.78e-05\npolygon 13        69 5.63134e+04      7.52e-05\npolygon 14       143 1.45139e+05      1.94e-04\npolygon 15       165 3.38736e+05      4.52e-04\npolygon 16       130 9.40465e+04      1.26e-04\npolygon 17        19 1.80977e+03      2.42e-06\npolygon 18        16 2.01046e+03      2.69e-06\npolygon 19        93 4.30642e+05      5.75e-04\npolygon 20        90 4.15092e+05      5.54e-04\npolygon 21       721 1.92795e+06      2.57e-03\npolygon 22       330 1.11896e+06      1.49e-03\npolygon 23       115 9.28394e+05      1.24e-03\npolygon 24        37 1.01705e+04      1.36e-05\npolygon 25        25 1.66227e+04      2.22e-05\npolygon 26        10 2.14507e+03      2.86e-06\npolygon 27       190 2.02489e+05      2.70e-04\npolygon 28       175 9.25904e+05      1.24e-03\npolygon 29      1993 9.99217e+06      1.33e-02\npolygon 30        38 2.42492e+04      3.24e-05\npolygon 31        24 6.35239e+03      8.48e-06\npolygon 32        53 6.35791e+05      8.49e-04\npolygon 33        41 1.60161e+04      2.14e-05\npolygon 34        22 2.54368e+03      3.40e-06\npolygon 35        30 1.08382e+04      1.45e-05\npolygon 36       327 2.16921e+06      2.90e-03\npolygon 37       111 6.62927e+05      8.85e-04\npolygon 38        90 1.15991e+05      1.55e-04\npolygon 39        98 6.26829e+04      8.37e-05\npolygon 40       415 3.25384e+06      4.35e-03\npolygon 41       222 1.51142e+06      2.02e-03\npolygon 42       107 6.33039e+05      8.45e-04\npolygon 43         7 2.48299e+03      3.32e-06\npolygon 44        17 3.28303e+04      4.38e-05\npolygon 45        26 8.34758e+03      1.11e-05\npolygon 46       177 4.67446e+05      6.24e-04\npolygon 47        16 3.19460e+03      4.27e-06\npolygon 48        15 4.87296e+03      6.51e-06\npolygon 49        66 1.61841e+04      2.16e-05\npolygon 50       149 5.63430e+06      7.53e-03\npolygon 51       609 2.62570e+07      3.51e-02\npolygon 52         8 7.82256e+03      1.04e-05\npolygon 53       976 2.33447e+07      3.12e-02\npolygon 54        55 8.25379e+04      1.10e-04\npolygon 55       976 2.33447e+07      3.12e-02\npolygon 56        61 3.33449e+05      4.45e-04\npolygon 57         6 1.68410e+04      2.25e-05\npolygon 58         4 9.45963e+03      1.26e-05\npolygon 59        46 6.99702e+05      9.35e-04\npolygon 60        13 7.00873e+04      9.36e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 748741000 square units\nFraction of frame area: 0.414\n\n\n\n\n4.6 Combining Point Events Object and owin Object\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\n\n\nsummary(childcareSG_ppp)\n\nPlanar point pattern:  1545 points\nAverage intensity 2.063463e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: polygonal boundary\n60 separate polygons (no holes)\n            vertices        area relative.area\npolygon 1         38 1.56140e+04      2.09e-05\npolygon 2        735 4.69093e+06      6.27e-03\npolygon 3         49 1.66986e+04      2.23e-05\npolygon 4         76 3.12332e+05      4.17e-04\npolygon 5       5141 6.36179e+08      8.50e-01\npolygon 6         42 5.58317e+04      7.46e-05\npolygon 7         67 1.31354e+06      1.75e-03\npolygon 8         15 4.46420e+03      5.96e-06\npolygon 9         14 5.46674e+03      7.30e-06\npolygon 10        37 5.26194e+03      7.03e-06\npolygon 11        53 3.44003e+04      4.59e-05\npolygon 12        74 5.82234e+04      7.78e-05\npolygon 13        69 5.63134e+04      7.52e-05\npolygon 14       143 1.45139e+05      1.94e-04\npolygon 15       165 3.38736e+05      4.52e-04\npolygon 16       130 9.40465e+04      1.26e-04\npolygon 17        19 1.80977e+03      2.42e-06\npolygon 18        16 2.01046e+03      2.69e-06\npolygon 19        93 4.30642e+05      5.75e-04\npolygon 20        90 4.15092e+05      5.54e-04\npolygon 21       721 1.92795e+06      2.57e-03\npolygon 22       330 1.11896e+06      1.49e-03\npolygon 23       115 9.28394e+05      1.24e-03\npolygon 24        37 1.01705e+04      1.36e-05\npolygon 25        25 1.66227e+04      2.22e-05\npolygon 26        10 2.14507e+03      2.86e-06\npolygon 27       190 2.02489e+05      2.70e-04\npolygon 28       175 9.25904e+05      1.24e-03\npolygon 29      1993 9.99217e+06      1.33e-02\npolygon 30        38 2.42492e+04      3.24e-05\npolygon 31        24 6.35239e+03      8.48e-06\npolygon 32        53 6.35791e+05      8.49e-04\npolygon 33        41 1.60161e+04      2.14e-05\npolygon 34        22 2.54368e+03      3.40e-06\npolygon 35        30 1.08382e+04      1.45e-05\npolygon 36       327 2.16921e+06      2.90e-03\npolygon 37       111 6.62927e+05      8.85e-04\npolygon 38        90 1.15991e+05      1.55e-04\npolygon 39        98 6.26829e+04      8.37e-05\npolygon 40       415 3.25384e+06      4.35e-03\npolygon 41       222 1.51142e+06      2.02e-03\npolygon 42       107 6.33039e+05      8.45e-04\npolygon 43         7 2.48299e+03      3.32e-06\npolygon 44        17 3.28303e+04      4.38e-05\npolygon 45        26 8.34758e+03      1.11e-05\npolygon 46       177 4.67446e+05      6.24e-04\npolygon 47        16 3.19460e+03      4.27e-06\npolygon 48        15 4.87296e+03      6.51e-06\npolygon 49        66 1.61841e+04      2.16e-05\npolygon 50       149 5.63430e+06      7.53e-03\npolygon 51       609 2.62570e+07      3.51e-02\npolygon 52         8 7.82256e+03      1.04e-05\npolygon 53       976 2.33447e+07      3.12e-02\npolygon 54        55 8.25379e+04      1.10e-04\npolygon 55       976 2.33447e+07      3.12e-02\npolygon 56        61 3.33449e+05      4.45e-04\npolygon 57         6 1.68410e+04      2.25e-05\npolygon 58         4 9.45963e+03      1.26e-05\npolygon 59        46 6.99702e+05      9.35e-04\npolygon 60        13 7.00873e+04      9.36e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 748741000 square units\nFraction of frame area: 0.414\n\n\nPlotting childcareSG_ppp\n\nplot(childcareSG_ppp)"
  },
  {
    "objectID": "handson_ex/HE4/HE4.html#first-order-spatial-point-patterns-analysis",
    "href": "handson_ex/HE4/HE4.html#first-order-spatial-point-patterns-analysis",
    "title": "Hands-on Exercise 4 & 5: 1st & 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "5 First-order Spatial Point Patterns Analysis",
    "text": "5 First-order Spatial Point Patterns Analysis\n\n5.1 Kernel Density Estimation\n\n5.1.1 Automatic Bandwidth Selection Method\n\nkde_childcareSG_bw <- density(\n  childcareSG_ppp,\n  sigma = bw.diggle,\n  edge = TRUE,\n  kernel = \"gaussian\"\n)\n\n\nplot(kde_childcareSG_bw)\n\n\n\n\nRetrieving the bandwidth used to compute KDE layer\n\nbw <- bw.diggle(childcareSG_ppp)\nbw\n\n   sigma \n298.4095 \n\n\n\n\n5.1.2 Re-scaling KDE Values\nConvert unit of measurement from meter to kilometer\n\nchildcareSG_ppp.km <- rescale(childcareSG_ppp, 1000, \"km\")\n\n\nkde_childcareSG_bw <- density(\n  childcareSG_ppp.km,\n  sigma = bw.diggle,\n  edge = TRUE,\n  kernel = \"gaussian\"\n)\n\n\nplot(kde_childcareSG_bw)\n\n\n\n\n\n\n\n5.2 Alternative Methods\n\nbw.CvL(childcareSG_ppp.km)\n\n   sigma \n4.543278 \n\n\n\nbw.scott(childcareSG_ppp.km)\n\n sigma.x  sigma.y \n2.224898 1.450966 \n\n\n\nbw.ppl(childcareSG_ppp.km)\n\n    sigma \n0.3897114 \n\n\n\nbw.diggle(childcareSG_ppp.km)\n\n    sigma \n0.2984095 \n\n\n\n5.2.1 Comparing Outputs of Different Algorithms\n\nkde_childcareSG.ppl <- density(childcareSG_ppp.km, \n                               sigma=bw.ppl, \n                               edge=TRUE,\n                               kernel=\"gaussian\")\npar(mfrow=c(1,2))\nplot(kde_childcareSG_bw, main = \"bw.diggle\")\nplot(kde_childcareSG.ppl, main = \"bw.ppl\")\n\n\n\n\n\n\n5.2.2 Alternative Kernel Methods\n\npar(mfrow = c(2,2))\nplot(density(\n  childcareSG_ppp.km,\n  sigma = bw.ppl,\n  edge = TRUE,\n  kernel = \"gaussian\"\n), main = \"Gaussian\")\nplot(density(\n  childcareSG_ppp.km,\n  sigma = bw.ppl,\n  edge = TRUE,\n  kernel = \"epanechnikov\"\n), main = \"Epanechnikov\")\nplot(density(\n  childcareSG_ppp.km,\n  sigma = bw.ppl,\n  edge = TRUE,\n  kernel = \"quartic\"\n), main = \"Quartic\")\nplot(density(\n  childcareSG_ppp.km,\n  sigma = bw.ppl,\n  edge = TRUE,\n  kernel = \"disc\"\n), main = \"Disc\")\n\n\n\n\n\n\n5.2.3 Comparing Fixed and Adaptive Bandwidth\n\npar(mfrow = c(1,2))\nplot(density(\n  childcareSG_ppp.km,\n  sigma = 0.6,\n  edge = TRUE,\n  kernel = \"gaussian\"\n), main = \"Fixed Bandwidth\")\nplot(adaptive.density(\n  childcareSG_ppp.km,\n  method = \"kernel\"\n), main = \"Adaptive Bandwidth\")\n\n\n\n\n\n\n5.2.4 Converting KDE Output to Grid Object\n\ngridded_kde_childcareSG_bw <- as.SpatialGridDataFrame.im(kde_childcareSG_bw)\nspplot(gridded_kde_childcareSG_bw)\n\n\n\n\n\n\n5.2.5 Convert Grid Output to Raster Layer\n\nkde_childcareSG_bw_raster <- raster(gridded_kde_childcareSG_bw)\n\n\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -8.476185e-15, 28.51831  (min, max)\n\n\nMissing CRS requires projection systems assignment\n\nprojection(kde_childcareSG_bw_raster) <- CRS(\"+init=EPSG:3414\")\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : +init=EPSG:3414 \nsource     : memory\nnames      : v \nvalues     : -8.476185e-15, 28.51831  (min, max)\n\n\n\n\n5.2.6 Visualising Output\n\ntm_shape(kde_childcareSG_bw_raster) +\n  tm_raster(\"v\") +\n  tm_layout(\n    legend.position = c(\"right\", \"bottom\"),\n    frame = FALSE\n  )\n\n\n\n\n\n\n\n\n5.3 Comparing Spatial Point Patterns\n\n5.3.1 Extracting Study Area\nComparing KDE of childcare at 4 locations: Punggol, Tampines, Choa Chu Kang and Jurong West.\n\npg = mpsz[mpsz@data$PLN_AREA_N == \"PUNGGOL\",]\ntm = mpsz[mpsz@data$PLN_AREA_N == \"TAMPINES\",]\nck = mpsz[mpsz@data$PLN_AREA_N == \"CHOA CHU KANG\",]\njw = mpsz[mpsz@data$PLN_AREA_N == \"JURONG WEST\",]\n\nPlotting the 4 target planning areas:\n\npar(mfrow = c(2,2))\nplot(pg, main = \"Punggol\")\nplot(tm, main = \"Tampines\")\nplot(ck, main = \"Choa Chu Kang\")\nplot(jw, main = \"Jurong West\")\n\n\n\n\n\n\n5.3.2 Converting Spatial Point Data Frame into Spatial Polygon Objects\n\npg_sp = as(pg, \"SpatialPolygons\")\ntm_sp = as(tm, \"SpatialPolygons\")\nck_sp = as(ck, \"SpatialPolygons\")\njw_sp = as(jw, \"SpatialPolygons\")\n\n\n\n5.3.3 Converting Spatial Polygon Objects to owin Objects\n\npg_owin = as(pg_sp, \"owin\")\ntm_owin = as(tm_sp, \"owin\")\nck_owin = as(ck_sp, \"owin\")\njw_owin = as(jw_sp, \"owin\")\n\n\n\n5.3.4 Combining Childcare Points and Study Areas\n\nchildcare_pg_ppp = childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp = childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp = childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp = childcare_ppp_jit[jw_owin]\n\n\n\n5.3.5 Re-scaling unit of measurement from meter to kilometer:\n\nchildcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, \"km\")\n\n\n\n5.3.6 Plotting Output\n\npar(mfrow = c(2,2))\nplot(childcare_pg_ppp.km, main = \"Punggol\")\nplot(childcare_tm_ppp.km, main = \"Tampines\")\nplot(childcare_ck_ppp.km, main = \"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main = \"Jurong West\")\n\n\n\n\n\n\n5.3.7 Computing KDE\n\npar(mfrow = c(2,2))\nplot(density(\n  childcare_pg_ppp.km,\n  sigma = bw.diggle,\n  edge = TRUE,\n  kernel = \"gaussian\"\n), main = \"Punggol\")\nplot(density(\n  childcare_tm_ppp.km,\n  sigma = bw.diggle,\n  edge = TRUE,\n  kernel = \"gaussian\"\n), main = \"Tampines\")\nplot(density(\n  childcare_ck_ppp.km,\n  sigma = bw.diggle,\n  edge = TRUE,\n  kernel = \"gaussian\"\n), main = \"Choa Chu Kang\")\nplot(density(\n  childcare_jw_ppp.km,\n  sigma = bw.diggle,\n  edge = TRUE,\n  kernel = \"gaussian\"\n), main = \"Jurong West\")\n\n\n\n\n\n\n5.3.8 Computing Fixed Bandwidth KDE\nBandwidth = 250m\n\npar(mfrow = c(2,2))\nplot(density(\n  childcare_pg_ppp.km,\n  sigma = 0.25,\n  edge = TRUE,\n  kernel = \"gaussian\"\n), main = \"Punggol\")\nplot(density(\n  childcare_tm_ppp.km,\n  sigma = 0.25,\n  edge = TRUE,\n  kernel = \"gaussian\"\n), main = \"Tampines\")\nplot(density(\n  childcare_ck_ppp.km,\n  sigma = 0.25,\n  edge = TRUE,\n  kernel = \"gaussian\"\n), main = \"Choa Chu Kang\")\nplot(density(\n  childcare_jw_ppp.km,\n  sigma = 0.25,\n  edge = TRUE,\n  kernel = \"gaussian\"\n), main = \"Jurong West\")"
  },
  {
    "objectID": "handson_ex/HE4/HE4.html#nearest-neighbour-analysis",
    "href": "handson_ex/HE4/HE4.html#nearest-neighbour-analysis",
    "title": "Hands-on Exercise 4 & 5: 1st & 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "6 Nearest Neighbour Analysis",
    "text": "6 Nearest Neighbour Analysis\nTest hypotheses:\nH0 = The distribution of childcare services are randomly distributed.\nH1 = The distribution of childcare services are not randomly distributed.\nConfident Interval of 95%.\n\n6.1 Clark and Evans Test\n\n6.1.1 Singapore Area\n\nclarkevans.test(\n  childcareSG_ppp,\n  correction = \"none\",\n  clipregion = \"sg_owin\",\n  alternative = c(\"clustered\"),\n  nsim = 99\n)\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 99 simulations of CSR with fixed n\n\ndata:  childcareSG_ppp\nR = 0.54756, p-value = 0.01\nalternative hypothesis: clustered (R < 1)\n\n\nConclusion:\nSince p-value is smaller than 0.05, null hypothesis is rejected. The distribution of childcare services are not randomly distributed.\nSince the R value is 0.55 (2 d.p.) < 1, the pattern exhibits clustering.\n\n\n6.1.2 Choa Chu Kang Planning Area\n\nclarkevans.test(\n  childcare_ck_ppp,\n  correction = \"none\",\n  clipregion = NULL,\n  alternative = c(\"two.sided\"),\n  nsim = 999\n)\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 999 simulations of CSR with fixed n\n\ndata:  childcare_ck_ppp\nR = 0.91854, p-value = 0.064\nalternative hypothesis: two-sided\n\n\nConclusion:\nSince p-value is larger than 0.05, null hypothesis is not rejected. The distribution of childcare services in Choa Chu Kang are randomly distributed.\nSince the R value is 0.97 (2 d.p.) < 1, the pattern exhibits clustering.\n\n\n6.1.3 Tampines Planning Area\n\nclarkevans.test(\n  childcare_tm_ppp,\n  correction = \"none\",\n  clipregion = NULL,\n  alternative = \"two.sided\",\n  nsim = 999\n)\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 999 simulations of CSR with fixed n\n\ndata:  childcare_tm_ppp\nR = 0.80798, p-value = 0.002\nalternative hypothesis: two-sided\n\n\nConclusion:\nSince p-value is smaller than 0.05, null hypothesis is rejected. The distribution of childcare services in Tampines are not randomly distributed.\nSince the R value is 0.80 (2 d.p.) < 1, the pattern exhibits clustering."
  },
  {
    "objectID": "handson_ex/HE1/HE1.html",
    "href": "handson_ex/HE1/HE1.html",
    "title": "Hands-on Exercise 1: Geospatial Wrangling with R",
    "section": "",
    "text": "pacman::p_load(sf, tidyverse)"
  },
  {
    "objectID": "handson_ex/HE1/HE1.html#plotting-geospatial-data",
    "href": "handson_ex/HE1/HE1.html#plotting-geospatial-data",
    "title": "Hands-on Exercise 1: Geospatial Wrangling with R",
    "section": "3 Plotting Geospatial Data",
    "text": "3 Plotting Geospatial Data\n\n3.1 plot(sf)\n\nThe plot() function is a simple way to plot the data. For better quality plots, tmap should be used.\n\nDefault plot: multi-plot of all attributes\n\nplot(mpsz)\n\n\n\n\n\n3.1.1 Plotting only the Geometry\n\nplot(st_geometry(mpsz))\n\n\n\n\n\n\n3.1.2 Plotting Specific Attributes\n\nplot(mpsz[\"PLN_AREA_N\"])"
  },
  {
    "objectID": "handson_ex/HE1/HE1.html#projection",
    "href": "handson_ex/HE1/HE1.html#projection",
    "title": "Hands-on Exercise 1: Geospatial Wrangling with R",
    "section": "4 Projection",
    "text": "4 Projection\n\n4.1 Assigning EPSG Code to sf Data Frame\n\n4.1.1 Checking CRS of sf Data Frame\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nThe EPSG is 9001 when svy21 should be 3414.\n\n\n4.1.2 Assigning the Correct EPSG Code\n\nmpsz3414 <- st_set_crs(mpsz, 3414)\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\n\n4.2 Transforming Projections\n\npreschool3414 <- st_transform(\n  preschool, crs = 3414\n)\nhead(preschool3414, n=5)\n\nSimple feature collection with 5 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 13258.34 ymin: 35611.04 xmax: 35272.09 ymax: 46634.14\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\n   Name\n1 kml_1\n2 kml_2\n3 kml_3\n4 kml_4\n5 kml_5\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Description\n1       <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>BRILLIANT TOTS PTE. LTD.</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT9334</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>610, JURONG WEST STREET 65, #01 - 534, S 640610</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>640610</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>0523C7904478A63D</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200812235534</td> </tr></table></center>\n2       <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>BUBBLESLAND PLAYHOUSE PTE LTD</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT7680</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>238, COMPASSVALE WALK, #01 - 542, S 540238</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>540238</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>18BED05A501AA168</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200812235534</td> </tr></table></center>\n3 <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>BUCKET HOUSE PRESCHOOL</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT9527</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>39, WOODLANDS CLOSE, #01 - 62, MEGA@WOODLANDS, S 737856</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>737856</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>C88B9AC31EE71BF6</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200812235534</td> </tr></table></center>\n4      <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>BUMBLE BEE CHILD CARE CENTRE</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT3150</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>369, WOODLANDS AVENUE 1, #01 - 853, S 730369</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>730369</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>64AB8FACA8F60129</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200812235534</td> </tr></table></center>\n5         <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>BUSY BEES SINGAPORE PTE LTD</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT9117</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>327B, ANCHORVALE ROAD, #01 - 322, S 542327</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>542327</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>E1B55AC65B9059E8</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200812235534</td> </tr></table></center>\n                       geometry\n1 POINT Z (13258.34 35611.04 0)\n2 POINT Z (35272.09 41373.42 0)\n3 POINT Z (25050.54 46634.14 0)\n4 POINT Z (22892.48 46127.66 0)\n5 POINT Z (34155.79 41949.13 0)"
  },
  {
    "objectID": "handson_ex/HE1/HE1.html#geospatial-data",
    "href": "handson_ex/HE1/HE1.html#geospatial-data",
    "title": "Hands-on Exercise 1: Geospatial Wrangling with R",
    "section": "2 Geospatial Data",
    "text": "2 Geospatial Data\n\n2.1 Importing Geospatial Data\nThere are 3 geospatial data-sets to import: MP14_SUBZONE_WEB_PL, CyclingPath and PreSchool respectively:\n\n2.1.1 MP14_SUBZONE_WEB_PL: Importing Polygon (MULTIPOLYGON) Feature Data Frame\n\ndsn: define data path\nlayer: shapefile name (accepts all extensions - .shp, .dbf, .prj, .shx)\n\n\nmpsz = st_read(\n  dsn = \"data/geospatial/mpsz\",\n  layer = \"MP14_SUBZONE_WEB_PL\"\n)\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\bellekwang\\IS415\\handson_ex\\HE1\\data\\geospatial\\mpsz' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n\n2.1.2 CyclingPath: Importing Polyline (MULTILINESTRING) Feature Data\n\ncyclingpath = st_read(\n  dsn = \"data/geospatial/cyclingpath\",\n  layer = \"CyclingPathGazette\"\n)\n\nReading layer `CyclingPathGazette' from data source \n  `D:\\bellekwang\\IS415\\handson_ex\\HE1\\data\\geospatial\\CyclingPath' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2248 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\n\n\n2.1.3 PreSchool: Importing KML Files\n\npreschool = st_read(\"data/geospatial/preschools-location.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `D:\\bellekwang\\IS415\\handson_ex\\HE1\\data\\geospatial\\preschools-location.kml' \n  using driver `KML'\nSimple feature collection with 1925 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\n\n\n2.2 Understanding sf Data Frame\n\n2.2.1 st_geometry(sf)\nDisplays number of features, geometry type, projected CRS (coordinate system) and the first 5 geometries.\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\n\n\n2.2.2 glimpse(sf)\nDisplays an overview of all the columns.\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\n\n\n2.2.3 head(sf, n=y)\nDisplays all information of the first n features of the data frame.\n\nhead(mpsz, n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30..."
  },
  {
    "objectID": "handson_ex/HE1/HE1.html#aspatial-data",
    "href": "handson_ex/HE1/HE1.html#aspatial-data",
    "title": "Hands-on Exercise 1: Geospatial Wrangling with R",
    "section": "5 Aspatial Data",
    "text": "5 Aspatial Data\n\n5.1 Importing Data\n\nlistings <- read_csv(\"data/aspatial/listings.csv\")\n\n\n\n5.2 Understanding the Data\nlist() instead of glimpse()\n\nlist(listings)\n\n[[1]]\n# A tibble: 3,037 × 18\n       id name     host_id host_…¹ neigh…² neigh…³ latit…⁴ longi…⁵ room_…⁶ price\n    <dbl> <chr>      <dbl> <chr>   <chr>   <chr>     <dbl>   <dbl> <chr>   <dbl>\n 1  71609 Ensuite…  367042 Belinda East R… Tampin…    1.35    104. Privat… 46437\n 2  71896 B&B  Ro…  367042 Belinda East R… Tampin…    1.35    104. Privat…    81\n 3  71903 Room 2-…  367042 Belinda East R… Tampin…    1.35    104. Privat…    81\n 4 275343 Amazing… 1439258 Kay     Centra… Bukit …    1.29    104. Privat…    52\n 5 275344 15 mins… 1439258 Kay     Centra… Bukit …    1.29    104. Privat…    49\n 6 289234 Booking…  367042 Belinda East R… Tampin…    1.34    104. Privat…   175\n 7 294281 5 mins … 1521514 Elizab… Centra… Newton     1.31    104. Privat…    79\n 8 324945 Cozy Bl… 1439258 Kay     Centra… Bukit …    1.29    104. Privat…    49\n 9 330089 Cozy Bl… 1439258 Kay     Centra… Bukit …    1.29    104. Privat…    55\n10 330095 10 mins… 1439258 Kay     Centra… Bukit …    1.29    104. Privat…    55\n# … with 3,027 more rows, 8 more variables: minimum_nights <dbl>,\n#   number_of_reviews <dbl>, last_review <date>, reviews_per_month <dbl>,\n#   calculated_host_listings_count <dbl>, availability_365 <dbl>,\n#   number_of_reviews_ltm <dbl>, license <chr>, and abbreviated variable names\n#   ¹​host_name, ²​neighbourhood_group, ³​neighbourhood, ⁴​latitude, ⁵​longitude,\n#   ⁶​room_type\n\n\n\n\n5.3 Creating sf Data Frame\n\nlistings_sf <- st_as_sf(\n  listings,\n  coords = c(\"longitude\", \"latitude\"),\n  crs = 4326\n) %>%\n  st_transform(crs = 3414)\n\n\nglimpse(listings_sf)\n\nRows: 3,037\nColumns: 17\n$ id                             <dbl> 71609, 71896, 71903, 275343, 275344, 28…\n$ name                           <chr> \"Ensuite Room (Room 1 & 2) near EXPO\", …\n$ host_id                        <dbl> 367042, 367042, 367042, 1439258, 143925…\n$ host_name                      <chr> \"Belinda\", \"Belinda\", \"Belinda\", \"Kay\",…\n$ neighbourhood_group            <chr> \"East Region\", \"East Region\", \"East Reg…\n$ neighbourhood                  <chr> \"Tampines\", \"Tampines\", \"Tampines\", \"Bu…\n$ room_type                      <chr> \"Private room\", \"Private room\", \"Privat…\n$ price                          <dbl> 46437, 81, 81, 52, 49, 175, 79, 49, 55,…\n$ minimum_nights                 <dbl> 92, 92, 92, 60, 60, 92, 92, 60, 60, 60,…\n$ number_of_reviews              <dbl> 20, 24, 47, 22, 14, 12, 133, 17, 12, 4,…\n$ last_review                    <date> 2020-01-17, 2019-10-13, 2020-01-09, 20…\n$ reviews_per_month              <dbl> 0.15, 0.17, 0.33, 0.19, 0.11, 0.09, 1.0…\n$ calculated_host_listings_count <dbl> 6, 6, 6, 46, 46, 6, 7, 46, 46, 46, 6, 7…\n$ availability_365               <dbl> 242, 242, 305, 273, 281, 242, 365, 274,…\n$ number_of_reviews_ltm          <dbl> 0, 0, 0, 2, 1, 0, 0, 3, 2, 1, 1, 0, 0, …\n$ license                        <chr> NA, NA, NA, \"S0399\", \"S0399\", NA, NA, \"…\n$ geometry                       <POINT [m]> POINT (41972.5 36390.05), POINT (…"
  },
  {
    "objectID": "handson_ex/HE1/HE1.html#geoprocessing",
    "href": "handson_ex/HE1/HE1.html#geoprocessing",
    "title": "Hands-on Exercise 1: Geospatial Wrangling with R",
    "section": "6 Geoprocessing",
    "text": "6 Geoprocessing\n\nScenario: The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.\n\n\nCompute 5-meter buffers around cycling paths\nCalculate the are of buffers\nCalculate the sum of total land involved\n\n\nbuffer_cycling <- st_buffer(cyclingpath, dist = 5, nQuadSegs = 30)\n\nnQuadSegs: number of line segments used to approximate a quarter circle\n\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n\n\nsum(buffer_cycling$AREA)\n\n1556978 [m^2]\n\n\nAnswer: 1556978 [m^2]\n\n\nScenario:\nA pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.\n\n\nIdentify pre-schools located inside each Planning Subzone\nCalculate number of pre-schools in each Planning Subzone\nList the Planning Subzone with most number of pre-school\n\n\nmpsz3414$`PreSch Count` <- lengths(st_intersects(mpsz3414, preschool3414))\n\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    3.00    5.96    9.00   58.00 \n\n\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           58\n\n\n\ntop_n(x, n, wt):\n\nn: top n rows\nwt: ordering by variable (optional)\n\n\n\nScenario:\nCalculate density of pre-school by planning subzone.\n\n\nCalculate area of each planning subzone\nCompute density\n\n\nmpsz3414$Area <- mpsz3414 %>%\n  st_area()\n\n\nmpsz3414 <- mpsz3414 %>%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\nTo make it look prettier:\n\nggplot(\n  data = mpsz3414,\n  aes(x=as.numeric(`PreSch Density`))\n) +\n  geom_histogram(\n    bins = 20,\n    color = \"black\",\n    fill = \"light blue\"\n  ) +\n  labs(\n    title = \"Are pre-schools even distributed in Singapore?\",\n    subtitle = \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n    x = \"Pre-school Density (per km sq)\",\n    y = \"Frequency\"\n  )\n\n\n\n\n\nRelationship between Pre-school Density and Pre-school Count\n\n\nggplot(data=mpsz3414, \n       aes(y = `PreSch Count`, \n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\", \n             fill=\"light blue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school count\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IS415",
    "section": "",
    "text": "Github Link"
  },
  {
    "objectID": "handson_ex/HE4/HE4.html#nd-order-spatial-point-pattern-analysis-methods",
    "href": "handson_ex/HE4/HE4.html#nd-order-spatial-point-pattern-analysis-methods",
    "title": "Hands-on Exercise 4 & 5: 1st & 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "7 2nd Order Spatial Point Pattern Analysis Methods",
    "text": "7 2nd Order Spatial Point Pattern Analysis Methods\n\n7.1 G-Function\nMeasures distribution of distances from an arbitrary event to its nearest event.\n\n7.1.1 Choa Chu Kang Planning Area\n\nGest(x): Estimates the nearest neighbour distance distribution function from a point pattern in a window of arbitrary shape\n\n\nG_CK = Gest(childcare_ck_ppp, correction = \"border\")\nplot(G_CK, xlim = c(0, 500))\n\n\n\n\n\nenvelope(x)\n\nif p-value < alpha-value (0.001) = null hypothesis is rejected\n\n\n\nG_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60........\n.70.........80.........90.........100.........110.........120.........130......\n...140.........150.........160.........170.........180.........190.........200....\n.....210.........220.........230.........240.........250.........260.........270..\n.......280.........290.........300.........310.........320.........330.........340\n.........350.........360.........370.........380.........390.........400........\n.410.........420.........430.........440.........450.........460.........470......\n...480.........490.........500.........510.........520.........530.........540....\n.....550.........560.........570.........580.........590.........600.........610..\n.......620.........630.........640.........650.........660.........670.........680\n.........690.........700.........710.........720.........730.........740........\n.750.........760.........770.........780.........790.........800.........810......\n...820.........830.........840.........850.........860.........870.........880....\n.....890.........900.........910.........920.........930.........940.........950..\n.......960.........970.........980.........990........ 999.\n\nDone.\n\n\n\nplot(G_CK.csr)\n\n\n\n\n\n\n7.1.2 Tampines Planning Area\n\nG_tm = Gest(childcare_tm_ppp, correction = \"best\")\nplot(G_tm)\n\n\n\n\n\nG_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60........\n.70.........80.........90.........100.........110.........120.........130......\n...140.........150.........160.........170.........180.........190.........200....\n.....210.........220.........230.........240.........250.........260.........270..\n.......280.........290.........300.........310.........320.........330.........340\n.........350.........360.........370.........380.........390.........400........\n.410.........420.........430.........440.........450.........460.........470......\n...480.........490.........500.........510.........520.........530.........540....\n.....550.........560.........570.........580.........590.........600.........610..\n.......620.........630.........640.........650.........660.........670.........680\n.........690.........700.........710.........720.........730.........740........\n.750.........760.........770.........780.........790.........800.........810......\n...820.........830.........840.........850.........860.........870.........880....\n.....890.........900.........910.........920.........930.........940.........950..\n.......960.........970.........980.........990........ 999.\n\nDone.\n\n\n\nplot(G_tm.csr)\n\n\n\n\n\n\n\n7.2 F-Function\nEstimates empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape.\n\n7.2.1 Choa Chu Kang Planning Area\n\nF_CK = Fest(childcare_ck_ppp)\nplot(F_CK)\n\n\n\n\nComplete Spatial Randomness Test\n\nF_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60........\n.70.........80.........90.........100.........110.........120.........130......\n...140.........150.........160.........170.........180.........190.........200....\n.....210.........220.........230.........240.........250.........260.........270..\n.......280.........290.........300.........310.........320.........330.........340\n.........350.........360.........370.........380.........390.........400........\n.410.........420.........430.........440.........450.........460.........470......\n...480.........490.........500.........510.........520.........530.........540....\n.....550.........560.........570.........580.........590.........600.........610..\n.......620.........630.........640.........650.........660.........670.........680\n.........690.........700.........710.........720.........730.........740........\n.750.........760.........770.........780.........790.........800.........810......\n...820.........830.........840.........850.........860.........870.........880....\n.....890.........900.........910.........920.........930.........940.........950..\n.......960.........970.........980.........990........ 999.\n\nDone.\n\n\n\nplot(F_CK.csr)\n\n\n\n\n\n\n7.2.2 Tampines\n\nF_tm = Fest(childcare_tm_ppp, correction = \"best\")\nplot(F_tm)\n\n\n\n\n\nF_tm.csr <- envelope(childcare_tm_ppp, Fest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60........\n.70.........80.........90.........100.........110.........120.........130......\n...140.........150.........160.........170.........180.........190.........200....\n.....210.........220.........230.........240.........250.........260.........270..\n.......280.........290.........300.........310.........320.........330.........340\n.........350.........360.........370.........380.........390.........400........\n.410.........420.........430.........440.........450.........460.........470......\n...480.........490.........500.........510.........520.........530.........540....\n.....550.........560.........570.........580.........590.........600.........610..\n.......620.........630.........640.........650.........660.........670.........680\n.........690.........700.........710.........720.........730.........740........\n.750.........760.........770.........780.........790.........800.........810......\n...820.........830.........840.........850.........860.........870.........880....\n.....890.........900.........910.........920.........930.........940.........950..\n.......960.........970.........980.........990........ 999.\n\nDone.\n\n\n\nplot(F_tm.csr)\n\n\n\n\n\n\n\n7.3 K-Function\nMeasures the number of events found up to a given distance of any particular event.\n\n7.3.1 Choa Chu Kang\n\nK_ck = Kest(childcare_ck_ppp, correction = \"Ripley\")\nplot(K_ck, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\nK_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,  99.\n\nDone.\n\n\n\nplot(K_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")\n\n\n\n\n\n\n7.3.2 Tampines Planning Area\n\nK_tm = Kest(childcare_tm_ppp, correction = \"Ripley\")\nplot(K_tm, . -r ~ r, \n     ylab= \"K(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\nK_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,  99.\n\nDone.\n\n\n\nplot(K_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"K(d)-r\", xlim=c(0,500))\n\n\n\n\n\n\n\n7.4 L-Function\n\n7.4.1 Choa Chu Kang Planning Area\n\nL_ck = Lest(childcare_ck_ppp, correction = \"Ripley\")\nplot(L_ck, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\nL_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,  99.\n\nDone.\n\n\n\nplot(L_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\n\n\n7.4.2 Tampines Planning Area\n\nL_tm = Lest(childcare_tm_ppp, correction = \"Ripley\")\nplot(L_tm, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\nL_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,  99.\n\nDone.\n\n\n\nplot(L_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"L(d)-r\", xlim=c(0,500))"
  },
  {
    "objectID": "take_home_ex/THE1/THE1.html",
    "href": "take_home_ex/THE1/THE1.html",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "Understanding the geographical distribution of functional and non-functional water points across Osun state in Nigeria.\n\n\n\n\n\n\nData\nFormat (Type)\nDescription\nSource\n\n\n\n\nWPdx+\nCSV (Aspatial)\nWater Points with details on how clean it is.\nWater Point Data Exchange (2020)\n\n\nNigeria Administrative Boundaries Level 2\nShapefile (Spatial)\nNigeria political administrative boundaries\nOCHA Service (2016)\n\n\nNigeria Geoboundaries\nShapefile (Spatial)\nNigeria political administrative boundaries\ngeoBoundaries (2020)"
  },
  {
    "objectID": "take_home_ex/THE1/THE1.html#installing-and-loading-packages",
    "href": "take_home_ex/THE1/THE1.html#installing-and-loading-packages",
    "title": "Take Home Exercise 1",
    "section": "2.1 Installing and Loading Packages",
    "text": "2.1 Installing and Loading Packages\n\npacman::p_load(sf, tidyverse, funModeling, tmap, sfdep, spatstat, maptools, raster, tidyr, dplyr, sp)"
  },
  {
    "objectID": "take_home_ex/THE1/THE1.html#importing-data",
    "href": "take_home_ex/THE1/THE1.html#importing-data",
    "title": "Take Home Exercise 1",
    "section": "2.2 Importing Data",
    "text": "2.2 Importing Data\n\n2.2.1 WPdx+\n\nImporting DataCreating Feature Data Frame\n\n\nFrom the aspatial data folder, import the WPdx csv file. Using the filter() function, get the Osun State data.\n\nwp_nga_osun <- read_csv(\"data/aspatial/WPdx.csv\") %>%\n  filter(`#adm1` == \"Osun\")\n\n\nhead(wp_nga_osun, n = 5)\n\n# A tibble: 5 × 74\n  row_id #sour…¹ #lat_…² #lon_…³ #repo…⁴ #stat…⁵ #wate…⁶ #wate…⁷ #wate…⁸ #wate…⁹\n   <dbl> <chr>     <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>   <chr>  \n1 225950 Federa…    7.43    4.26 05/05/… Yes     Boreho… Well    Hand P… Hand P…\n2 225524 Federa…    7.78    4.56 04/22/… Yes     Protec… Well    Hand P… Hand P…\n3 197014 Federa…    7.49    4.53 04/30/… Yes     Boreho… Well    Mechan… Mechan…\n4 225173 Federa…    7.93    4.73 05/02/… Yes     Boreho… Well    Hand P… Hand P…\n5 225843 Federa…    7.74    4.44 05/08/… Yes     Boreho… Well    Hand P… Hand P…\n# … with 64 more variables: `#facility_type` <chr>,\n#   `#clean_country_name` <chr>, `#clean_adm1` <chr>, `#clean_adm2` <chr>,\n#   `#clean_adm3` <chr>, `#clean_adm4` <chr>, `#install_year` <dbl>,\n#   `#installer` <chr>, `#rehab_year` <lgl>, `#rehabilitator` <lgl>,\n#   `#management_clean` <chr>, `#status_clean` <chr>, `#pay` <chr>,\n#   `#fecal_coliform_presence` <chr>, `#fecal_coliform_value` <dbl>,\n#   `#subjective_quality` <chr>, `#activity_id` <chr>, `#scheme_id` <chr>, …\n\n\n\n\n\nConvert wp_nga_osun into sf data.frame using st_as_sfc()\n\n\nwp_nga_osun$Geometry = st_as_sfc(wp_nga_osun$`New Georeferenced Column`)\nhead(wp_nga_osun)\n\n# A tibble: 6 × 75\n  row_id #sour…¹ #lat_…² #lon_…³ #repo…⁴ #stat…⁵ #wate…⁶ #wate…⁷ #wate…⁸ #wate…⁹\n   <dbl> <chr>     <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>   <chr>  \n1 225950 Federa…    7.43    4.26 05/05/… Yes     Boreho… Well    Hand P… Hand P…\n2 225524 Federa…    7.78    4.56 04/22/… Yes     Protec… Well    Hand P… Hand P…\n3 197014 Federa…    7.49    4.53 04/30/… Yes     Boreho… Well    Mechan… Mechan…\n4 225173 Federa…    7.93    4.73 05/02/… Yes     Boreho… Well    Hand P… Hand P…\n5 225843 Federa…    7.74    4.44 05/08/… Yes     Boreho… Well    Hand P… Hand P…\n6 235508 Federa…    7.15    4.64 04/27/… Yes     Protec… Well    Hand P… Hand P…\n# … with 65 more variables: `#facility_type` <chr>,\n#   `#clean_country_name` <chr>, `#clean_adm1` <chr>, `#clean_adm2` <chr>,\n#   `#clean_adm3` <chr>, `#clean_adm4` <chr>, `#install_year` <dbl>,\n#   `#installer` <chr>, `#rehab_year` <lgl>, `#rehabilitator` <lgl>,\n#   `#management_clean` <chr>, `#status_clean` <chr>, `#pay` <chr>,\n#   `#fecal_coliform_presence` <chr>, `#fecal_coliform_value` <dbl>,\n#   `#subjective_quality` <chr>, `#activity_id` <chr>, `#scheme_id` <chr>, …\n\n\n\nConvert tibble data.frame into sf object using st_sf(), including the correct Nigeria coordinate system, 26392.\n\n\nwp_sf <- st_sf(wp_nga_osun, crs = 4326) %>%\n  st_transform(crs = 26392)\nhead(wp_sf, n=5)\n\nSimple feature collection with 5 features and 74 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 202548.3 ymin: 381774.4 xmax: 254470 ymax: 435793.7\nProjected CRS: Minna / Nigeria Mid Belt\n# A tibble: 5 × 75\n  row_id #sour…¹ #lat_…² #lon_…³ #repo…⁴ #stat…⁵ #wate…⁶ #wate…⁷ #wate…⁸ #wate…⁹\n   <dbl> <chr>     <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>   <chr>  \n1 225950 Federa…    7.43    4.26 05/05/… Yes     Boreho… Well    Hand P… Hand P…\n2 225524 Federa…    7.78    4.56 04/22/… Yes     Protec… Well    Hand P… Hand P…\n3 197014 Federa…    7.49    4.53 04/30/… Yes     Boreho… Well    Mechan… Mechan…\n4 225173 Federa…    7.93    4.73 05/02/… Yes     Boreho… Well    Hand P… Hand P…\n5 225843 Federa…    7.74    4.44 05/08/… Yes     Boreho… Well    Hand P… Hand P…\n# … with 65 more variables: `#facility_type` <chr>,\n#   `#clean_country_name` <chr>, `#clean_adm1` <chr>, `#clean_adm2` <chr>,\n#   `#clean_adm3` <chr>, `#clean_adm4` <chr>, `#install_year` <dbl>,\n#   `#installer` <chr>, `#rehab_year` <lgl>, `#rehabilitator` <lgl>,\n#   `#management_clean` <chr>, `#status_clean` <chr>, `#pay` <chr>,\n#   `#fecal_coliform_presence` <chr>, `#fecal_coliform_value` <dbl>,\n#   `#subjective_quality` <chr>, `#activity_id` <chr>, `#scheme_id` <chr>, …"
  },
  {
    "objectID": "take_home_ex/THE1/THE1.html#importing-data-and-data-wrangling",
    "href": "take_home_ex/THE1/THE1.html#importing-data-and-data-wrangling",
    "title": "Take Home Exercise 1",
    "section": "2.2 Importing Data and Data Wrangling",
    "text": "2.2 Importing Data and Data Wrangling\n\n2.2.1 WPdx+\n\nImporting DataCleaning DataCreating Feature Data Frame and ProjectionFinal sf Dataframe\n\n\nFrom the aspatial data folder, import the WPdx csv file. Using the filter() function, get the Osun State data.\n\nwp_nga_osun <- read_csv(\"data/aspatial/WPdx.csv\") %>%\n  filter(`#adm1` == \"Osun\")\n\n\nhead(wp_nga_osun, n = 5)\n\n# A tibble: 5 × 74\n  row_id #sour…¹ #lat_…² #lon_…³ #repo…⁴ #stat…⁵ #wate…⁶ #wate…⁷ #wate…⁸ #wate…⁹\n   <dbl> <chr>     <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>   <chr>  \n1 225950 Federa…    7.43    4.26 05/05/… Yes     Boreho… Well    Hand P… Hand P…\n2 225524 Federa…    7.78    4.56 04/22/… Yes     Protec… Well    Hand P… Hand P…\n3 197014 Federa…    7.49    4.53 04/30/… Yes     Boreho… Well    Mechan… Mechan…\n4 225173 Federa…    7.93    4.73 05/02/… Yes     Boreho… Well    Hand P… Hand P…\n5 225843 Federa…    7.74    4.44 05/08/… Yes     Boreho… Well    Hand P… Hand P…\n# … with 64 more variables: `#facility_type` <chr>,\n#   `#clean_country_name` <chr>, `#clean_adm1` <chr>, `#clean_adm2` <chr>,\n#   `#clean_adm3` <chr>, `#clean_adm4` <chr>, `#install_year` <dbl>,\n#   `#installer` <chr>, `#rehab_year` <lgl>, `#rehabilitator` <lgl>,\n#   `#management_clean` <chr>, `#status_clean` <chr>, `#pay` <chr>,\n#   `#fecal_coliform_presence` <chr>, `#fecal_coliform_value` <dbl>,\n#   `#subjective_quality` <chr>, `#activity_id` <chr>, `#scheme_id` <chr>, …\n\n\n\n\n\nwp_nga_osun[rowSums(is.na(wp_nga_osun))!=0,]\n\n# A tibble: 5,059 × 74\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n    <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 225950 Federal Minis…    7.43    4.26 05/05/… Yes     Boreho… Well    Hand P…\n 2 225524 Federal Minis…    7.78    4.56 04/22/… Yes     Protec… Well    Hand P…\n 3 197014 Federal Minis…    7.49    4.53 04/30/… Yes     Boreho… Well    Mechan…\n 4 225173 Federal Minis…    7.93    4.73 05/02/… Yes     Boreho… Well    Hand P…\n 5 225843 Federal Minis…    7.74    4.44 05/08/… Yes     Boreho… Well    Hand P…\n 6 235508 Federal Minis…    7.15    4.64 04/27/… Yes     Protec… Well    Hand P…\n 7 197708 Federal Minis…    7.87    4.72 05/13/… Yes     Boreho… Well    Mechan…\n 8 195041 Federal Minis…    7.73    4.45 06/17/… Yes     Protec… Spring  <NA>   \n 9 225222 Federal Minis…    7.81    4.15 05/14/… Yes     Protec… Spring  Mechan…\n10 196907 Federal Minis…    7.96    4.57 05/12/… No      Boreho… Well    Mechan…\n# … with 5,049 more rows, 65 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …\n\n\nAll 5059 observations have a NULL value for variables such as “#adm3”, “#adm4”, “install_year” etc. However none of the NULL values have a impact on the analysis to be done so the NULL values will be ignored.\n\n\n\nConvert wp_nga_osun into sf data.frame using st_as_sfc()\n\n\nwp_nga_osun$Geometry = st_as_sfc(wp_nga_osun$`New Georeferenced Column`)\nhead(wp_nga_osun)\n\n# A tibble: 6 × 75\n  row_id #sour…¹ #lat_…² #lon_…³ #repo…⁴ #stat…⁵ #wate…⁶ #wate…⁷ #wate…⁸ #wate…⁹\n   <dbl> <chr>     <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>   <chr>  \n1 225950 Federa…    7.43    4.26 05/05/… Yes     Boreho… Well    Hand P… Hand P…\n2 225524 Federa…    7.78    4.56 04/22/… Yes     Protec… Well    Hand P… Hand P…\n3 197014 Federa…    7.49    4.53 04/30/… Yes     Boreho… Well    Mechan… Mechan…\n4 225173 Federa…    7.93    4.73 05/02/… Yes     Boreho… Well    Hand P… Hand P…\n5 225843 Federa…    7.74    4.44 05/08/… Yes     Boreho… Well    Hand P… Hand P…\n6 235508 Federa…    7.15    4.64 04/27/… Yes     Protec… Well    Hand P… Hand P…\n# … with 65 more variables: `#facility_type` <chr>,\n#   `#clean_country_name` <chr>, `#clean_adm1` <chr>, `#clean_adm2` <chr>,\n#   `#clean_adm3` <chr>, `#clean_adm4` <chr>, `#install_year` <dbl>,\n#   `#installer` <chr>, `#rehab_year` <lgl>, `#rehabilitator` <lgl>,\n#   `#management_clean` <chr>, `#status_clean` <chr>, `#pay` <chr>,\n#   `#fecal_coliform_presence` <chr>, `#fecal_coliform_value` <dbl>,\n#   `#subjective_quality` <chr>, `#activity_id` <chr>, `#scheme_id` <chr>, …\n\n\n\nConvert tibble data.frame into sf object using st_sf(), including the correct Nigeria coordinate system, 26392.\n\n\nwp_sf <- st_sf(wp_nga_osun, crs = 4326) %>%\n  st_transform(crs = 26392)\nhead(wp_sf, n=5)\n\nSimple feature collection with 5 features and 74 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 202548.3 ymin: 381774.4 xmax: 254470 ymax: 435793.7\nProjected CRS: Minna / Nigeria Mid Belt\n# A tibble: 5 × 75\n  row_id #sour…¹ #lat_…² #lon_…³ #repo…⁴ #stat…⁵ #wate…⁶ #wate…⁷ #wate…⁸ #wate…⁹\n   <dbl> <chr>     <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>   <chr>  \n1 225950 Federa…    7.43    4.26 05/05/… Yes     Boreho… Well    Hand P… Hand P…\n2 225524 Federa…    7.78    4.56 04/22/… Yes     Protec… Well    Hand P… Hand P…\n3 197014 Federa…    7.49    4.53 04/30/… Yes     Boreho… Well    Mechan… Mechan…\n4 225173 Federa…    7.93    4.73 05/02/… Yes     Boreho… Well    Hand P… Hand P…\n5 225843 Federa…    7.74    4.44 05/08/… Yes     Boreho… Well    Hand P… Hand P…\n# … with 65 more variables: `#facility_type` <chr>,\n#   `#clean_country_name` <chr>, `#clean_adm1` <chr>, `#clean_adm2` <chr>,\n#   `#clean_adm3` <chr>, `#clean_adm4` <chr>, `#install_year` <dbl>,\n#   `#installer` <chr>, `#rehab_year` <lgl>, `#rehabilitator` <lgl>,\n#   `#management_clean` <chr>, `#status_clean` <chr>, `#pay` <chr>,\n#   `#fecal_coliform_presence` <chr>, `#fecal_coliform_value` <dbl>,\n#   `#subjective_quality` <chr>, `#activity_id` <chr>, `#scheme_id` <chr>, …\n\n\n\n\n\nCheck for the CRS and EPSG\n\n\nst_crs(wp_sf)\n\nCoordinate Reference System:\n  User input: EPSG:26392 \n  wkt:\nPROJCRS[\"Minna / Nigeria Mid Belt\",\n    BASEGEOGCRS[\"Minna\",\n        DATUM[\"Minna\",\n            ELLIPSOID[\"Clarke 1880 (RGS)\",6378249.145,293.465,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4263]],\n    CONVERSION[\"Nigeria Mid Belt\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",4,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",8.5,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.99975,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",670553.98,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Nigeria between 6°30'E and 10°30'E, onshore and offshore shelf.\"],\n        BBOX[3.57,6.5,13.53,10.51]],\n    ID[\"EPSG\",26392]]\n\n\n\nSummary of wp_sf\n\n\nst_geometry(wp_sf)\n\nGeometry set for 5059 features \nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 182486.3 ymin: 340054.1 xmax: 291546.1 ymax: 452045.5\nProjected CRS: Minna / Nigeria Mid Belt\nFirst 5 geometries:\n\n\n\n\n\n\n\n2.2.2 Nigeria Administrative Boundaries Level 2\n\nImport DataProjectionFinal sf Dataframe\n\n\n\nNGA = st_read(\n  \"data/geospatial\",\n  layer = \"nga_polnda_adm2_1m_salb\"\n)\n\nReading layer `nga_polnda_adm2_1m_salb' from data source \n  `D:\\bellekwang\\IS415\\take_home_ex\\THE1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 773 features and 12 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668432 ymin: 4.277144 xmax: 14.67808 ymax: 13.90103\nGeodetic CRS:  WGS 84\n\n\nThe NGA sf dataframe is imported as a MULTIPOLYGON sf dataframe. The CRS is “WGS 84” which is incorrect.\n\n\n\nTransform NGA CRS to 26392\n\n\nNGA <- st_transform(NGA, crs = 26392)\n\n\nCheck the EPSG\n\n\nst_crs(NGA)\n\nCoordinate Reference System:\n  User input: EPSG:26392 \n  wkt:\nPROJCRS[\"Minna / Nigeria Mid Belt\",\n    BASEGEOGCRS[\"Minna\",\n        DATUM[\"Minna\",\n            ELLIPSOID[\"Clarke 1880 (RGS)\",6378249.145,293.465,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4263]],\n    CONVERSION[\"Nigeria Mid Belt\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",4,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",8.5,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.99975,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",670553.98,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Nigeria between 6°30'E and 10°30'E, onshore and offshore shelf.\"],\n        BBOX[3.57,6.5,13.53,10.51]],\n    ID[\"EPSG\",26392]]\n\n\n\n\n\nst_geometry(NGA)\n\nGeometry set for 773 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 26650.44 ymin: 30984.34 xmax: 1344058 ymax: 1096748\nProjected CRS: Minna / Nigeria Mid Belt\nFirst 5 geometries:\n\n\n\n\n\n\n\n2.2.3 geoBoundaries\n\nImport DataProjectionFinal sf Dataframe\n\n\nImport the geoBoundaries using st_read to create a geoBoundaries sf dataframe.\n\ngeoNGA <- st_read(\n  \"data/geospatial\",\n  layer = \"geoBoundaries-NGA-ADM2\"\n)\n\nReading layer `geoBoundaries-NGA-ADM2' from data source \n  `D:\\bellekwang\\IS415\\take_home_ex\\THE1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\nThe geoBoundaries sf dataframe is imported as a MULTIPOLYGON sf dataframe. The CRS is “WGS 84” which is incorrect.\n\n\n\nTransform geoNGA CRS to 26932\n\n\ngeoNGA <- st_transform(\n  geoNGA, crs = 26932\n)\n\n\nCheck the EPSG\n\n\nst_crs(geoNGA)\n\nCoordinate Reference System:\n  User input: EPSG:26932 \n  wkt:\nPROJCRS[\"NAD83 / Alaska zone 2\",\n    BASEGEOGCRS[\"NAD83\",\n        DATUM[\"North American Datum 1983\",\n            ELLIPSOID[\"GRS 1980\",6378137,298.257222101,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4269]],\n    CONVERSION[\"SPCS83 Alaska zone 2 (meters)\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",54,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",-142,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9999,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"easting (X)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"northing (Y)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"United States (USA) - Alaska - between 144°W and 141°W, onshore.\"],\n        BBOX[59.72,-144.01,70.16,-140.98]],\n    ID[\"EPSG\",26932]]\n\n\nThe EPSG is now correct at 26932.\n\n\n\nst_geometry(geoNGA)\n\nGeometry set for 774 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 3104634 ymin: 12206480 xmax: 4671986 ymax: 13459860\nProjected CRS: NAD83 / Alaska zone 2\nFirst 5 geometries:"
  },
  {
    "objectID": "take_home_ex/THE1/THE1.html#cleaning-and-tidying-data",
    "href": "take_home_ex/THE1/THE1.html#cleaning-and-tidying-data",
    "title": "Take Home Exercise 1",
    "section": "2.3 Cleaning and Tidying Data",
    "text": "2.3 Cleaning and Tidying Data\ncheck for duplicate\nthen use jitter\n\n2.3.1 WPdx+\n\nfreq(data = wp_sf,\n     input = '#status_clean')\n\n\n\n\n              #status_clean frequency percentage cumulative_perc\n1                Functional      2461      48.65           48.65\n2            Non-Functional      2084      41.19           89.84\n3  Functional, needs repair       266       5.26           95.10\n4       Non-Functional, dry       162       3.20           98.30\n5    Functional, not in use        62       1.23           99.53\n6  Abandoned/Decommissioned        16       0.32           99.85\n7 Functional but not in use         8       0.16          100.00"
  },
  {
    "objectID": "inclass_ex/ICE5/ICE5.html",
    "href": "inclass_ex/ICE5/ICE5.html",
    "title": "In-class Exercise 5",
    "section": "",
    "text": "Colocated: A is surrounded by several point events B within specified distance.\nIsolated: A is surrounded by several point events A within specified distance (more A>B)\n\n\n\n\n\nBase formula\nWeighted average\nKernel function\n\nbi-square kernel will be 0 if value is negative\n\n\n\n\n\nAlgorithm calculates the p-value during permutations.\n\n\n\n\nquotient score for each input of interest\n\n>1: more like to have category B (colocated)\n<1: less likely to have category B (isolated)\n=1: proportion of categories within neighbourhood is a good representation of the entire area (but rare)\ncannot go less than 0\n\np-value: significance(?)"
  },
  {
    "objectID": "inclass_ex/ICE5/ICE5.html#setting-up",
    "href": "inclass_ex/ICE5/ICE5.html#setting-up",
    "title": "In-class Exercise 5",
    "section": "1.1 Setting Up",
    "text": "1.1 Setting Up\n\n1.1.1 Installing and Loading Packages\n\npacman::p_load(sf, tidyverse, tmap, sfdep)\n\n\n\n1.1.2 Importing Data\n\nTaiwan CRS: 3829\n\n\nstudyArea <- st_read(\n  dsn = \"data\",\n  layer = \"study_area\"\n) %>%\n  st_transform(crs = 3829)\n\nReading layer `study_area' from data source \n  `D:\\bellekwang\\IS415\\inclass_ex\\ICE5\\data' using driver `ESRI Shapefile'\nSimple feature collection with 7 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 121.4836 ymin: 25.00776 xmax: 121.592 ymax: 25.09288\nGeodetic CRS:  TWD97\n\n\n\nstores <- st_read(\n  dsn = \"data\",\n  layer = \"stores\"\n) %>%\n  st_transform(crs = 3829)\n\nReading layer `stores' from data source `D:\\bellekwang\\IS415\\inclass_ex\\ICE5\\data' using driver `ESRI Shapefile'\nSimple feature collection with 1409 features and 4 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 121.4902 ymin: 25.01257 xmax: 121.5874 ymax: 25.08557\nGeodetic CRS:  TWD97\n\n\n\nstudyArea is a POLYGON sf dataframe with 7 features\nstores is a POINT sf dataframe with 1409 features"
  },
  {
    "objectID": "inclass_ex/ICE5/ICE5.html#data-visualisation",
    "href": "inclass_ex/ICE5/ICE5.html#data-visualisation",
    "title": "In-class Exercise 5",
    "section": "1.2 Data Visualisation",
    "text": "1.2 Data Visualisation\n\ntmap_mode(\"view\")\ntm_shape(studyArea) + #plot polygon before point/line\n  tm_polygons() +\ntm_shape(stores) +\n  tm_dots(\n    col = \"Name\",\n    size = 0.01,\n    border.col = \"black\",\n    border.lwd = 0.5\n  ) +\n  tm_view(set.zoom.limits = c(12,16))"
  },
  {
    "objectID": "inclass_ex/ICE5/ICE5.html#local-colocation-quotient-lclq",
    "href": "inclass_ex/ICE5/ICE5.html#local-colocation-quotient-lclq",
    "title": "In-class Exercise 5",
    "section": "1.3 Local Colocation Quotient (LCLQ)",
    "text": "1.3 Local Colocation Quotient (LCLQ)\nlocal_colocation(A, B, nb, wt, nsim)\n\nnb: neighbour list\nwt: kernel to use\nnsim: number of simulations run\n\n\n1.3.1 Calculate Neighbour List\nSearch for the 6 nearest neightbour\n\nincludes self: total of 7 points, will not get a LCLQ of 1\n\n\nnb <- include_self(st_knn(st_geometry(stores), 6))\n\n\nglimpse(nb)\n\nList of 1409\n $ : int [1:7] 1 260 273 395 468 693 735\n $ : int [1:7] 2 28 344 389 392 626 742\n $ : int [1:7] 3 496 714 722 873 1148 1372\n $ : int [1:7] 4 362 391 678 951 1184 1330\n $ : int [1:7] 5 30 136 351 726 761 915\n $ : int [1:7] 6 40 285 316 431 708 1255\n $ : int [1:7] 7 284 376 695 842 850 1062\n $ : int [1:7] 8 13 533 574 597 647 1169\n $ : int [1:7] 9 503 544 818 1152 1214 1322\n $ : int [1:7] 10 357 499 533 598 716 1336\n $ : int [1:7] 11 35 48 259 419 569 1228\n $ : int [1:7] 12 38 412 602 620 622 1164\n $ : int [1:7] 13 464 482 574 597 647 894\n $ : int [1:7] 14 502 655 727 905 1143 1245\n $ : int [1:7] 15 33 78 387 399 414 1361\n $ : int [1:7] 16 166 511 674 1157 1237 1346\n $ : int [1:7] 17 240 456 667 878 960 1137\n $ : int [1:7] 18 157 237 316 1192 1312 1320\n $ : int [1:7] 19 195 338 508 530 740 1059\n $ : int [1:7] 20 58 153 560 578 756 1127\n $ : int [1:7] 21 97 673 833 883 1032 1249\n $ : int [1:7] 22 621 709 865 978 1060 1313\n $ : int [1:7] 23 59 902 931 1136 1166 1176\n $ : int [1:7] 24 210 501 624 631 1135 1161\n $ : int [1:7] 25 186 584 676 734 987 1285\n $ : int [1:7] 26 130 192 768 817 838 1151\n $ : int [1:7] 27 256 387 694 882 1050 1389\n $ : int [1:7] 2 28 344 389 626 742 919\n $ : int [1:7] 29 63 235 771 834 1025 1370\n $ : int [1:7] 5 30 136 351 726 761 915\n $ : int [1:7] 31 61 93 177 386 484 864\n $ : int [1:7] 32 406 448 486 772 938 1409\n $ : int [1:7] 15 33 78 387 399 414 1361\n $ : int [1:7] 34 115 330 546 586 1054 1357\n $ : int [1:7] 11 35 48 253 994 1228 1256\n $ : int [1:7] 36 333 837 1240 1304 1306 1342\n $ : int [1:7] 37 230 253 424 940 994 1095\n $ : int [1:7] 38 602 620 622 906 1164 1353\n $ : int [1:7] 39 384 857 888 1037 1155 1404\n $ : int [1:7] 6 40 285 316 431 708 1255\n $ : int [1:7] 41 279 377 618 701 1337 1374\n $ : int [1:7] 42 198 526 566 1007 1121 1238\n $ : int [1:7] 43 67 234 759 819 829 1035\n $ : int [1:7] 44 264 529 858 930 1084 1253\n $ : int [1:7] 16 45 145 166 327 511 1346\n $ : int [1:7] 30 46 915 1105 1106 1349 1380\n $ : int [1:7] 47 55 324 641 738 861 1124\n $ : int [1:7] 11 48 259 419 569 806 1228\n $ : int [1:7] 49 168 249 341 427 579 975\n $ : int [1:7] 50 205 435 527 570 866 1201\n $ : int [1:7] 51 181 185 394 826 985 1328\n $ : int [1:7] 52 81 633 781 800 830 928\n $ : int [1:7] 53 214 368 383 398 791 1123\n $ : int [1:7] 9 54 137 271 688 818 1214\n $ : int [1:7] 47 55 326 641 645 738 861\n $ : int [1:7] 56 228 318 361 839 1020 1025\n $ : int [1:7] 57 124 766 1027 1078 1296 1382\n $ : int [1:7] 20 58 96 560 578 756 1127\n $ : int [1:7] 23 59 605 902 931 1120 1136\n $ : int [1:7] 60 339 446 467 643 966 1047\n $ : int [1:7] 31 61 363 386 689 969 1251\n $ : int [1:7] 62 487 608 786 794 908 1235\n $ : int [1:7] 29 63 228 771 834 1025 1370\n $ : int [1:7] 38 64 602 906 976 1268 1353\n $ : int [1:7] 65 215 401 412 1220 1239 1375\n $ : int [1:7] 66 277 313 391 678 907 951\n $ : int [1:7] 67 234 335 741 819 829 1035\n $ : int [1:7] 68 256 456 872 882 933 964\n $ : int [1:7] 69 509 697 703 1031 1242 1335\n $ : int [1:7] 70 87 204 382 514 1338 1396\n $ : int [1:7] 71 140 328 947 988 1079 1339\n $ : int [1:7] 72 198 434 505 564 860 1007\n $ : int [1:7] 59 73 607 931 1023 1212 1308\n $ : int [1:7] 74 381 472 555 610 670 1222\n $ : int [1:7] 42 75 404 566 777 1071 1238\n $ : int [1:7] 76 225 264 390 858 1084 1253\n $ : int [1:7] 77 98 245 378 1065 1261 1262\n $ : int [1:7] 15 33 78 1110 1113 1361 1389\n $ : int [1:7] 79 214 295 383 657 1003 1343\n $ : int [1:7] 80 324 364 417 738 1124 1333\n $ : int [1:7] 81 174 438 800 830 928 1300\n $ : int [1:7] 82 336 459 733 974 1160 1273\n $ : int [1:7] 83 450 624 680 823 1070 1340\n $ : int [1:7] 84 173 265 601 923 1061 1089\n $ : int [1:7] 85 724 780 796 878 1117 1350\n $ : int [1:7] 86 104 467 654 655 904 1143\n $ : int [1:7] 70 87 299 382 514 705 1049\n $ : int [1:7] 88 105 411 478 576 732 895\n $ : int [1:7] 89 190 397 642 752 793 868\n $ : int [1:7] 90 215 401 441 630 879 925\n $ : int [1:7] 91 108 300 402 603 936 1234\n $ : int [1:7] 92 531 675 993 1078 1282 1354\n $ : int [1:7] 93 167 177 202 864 1055 1264\n $ : int [1:7] 94 269 553 619 828 885 1100\n $ : int [1:7] 95 176 224 803 1001 1388 1399\n $ : int [1:7] 20 58 96 560 578 756 1127\n $ : int [1:7] 21 97 455 673 833 1032 1249\n $ : int [1:7] 77 98 245 378 1065 1261 1262\n $ : int [1:7] 99 196 221 736 1098 1291 1292\n  [list output truncated]\n - attr(*, \"region.id\")= chr [1:1409] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language spdep::knearneigh(x = pnts, k = k)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr [1:2] \"nb\" \"list\"\n - attr(*, \"self.included\")= logi TRUE\n\n\n\nnb: list of 1409 x 7 points (1 self point + 6 neighbour points)\n\n\n\n1.3.2 Calculate Weight Matrix\n\nwt <- st_kernel_weights(\n  nb,\n  stores,\n  \"gaussian\",\n  adaptive = TRUE\n)\n\n\nConvert all nb into a weight matrix: list of 1409 x distance weight\nNearer the target, higher the weight\n\n\n\n1.3.3 Assigning A and B\n\nFamilyMart <- stores %>%\n  filter(Name == \"Family Mart\")\nA <- FamilyMart$Name\n\nSevenEleven <- stores %>%\n  filter(Name == \"7-Eleven\")\nB <- SevenEleven$Name\n\n\n\n1.3.4 Calculate LCLQ\n\nLCLQ <- local_colocation(A, B, nb, wt, 49)\n\n\nA: target, B: neighbour\n\n\n\n1.3.5 Visualising LCLQ\nCombine the LCLQ back to the geometry.\n\ncannot do relational joint because LCLQ has no unique identifier (left/right join)\ncbind only works if you don’t sort LCLQ: sequence needs to remain the same\nLHS: needs to be the geometry (inherit LHS)\n\n\nLCLQ_stores <- cbind(stores, LCLQ)\n\nPlot out LCLQ\n\ntmap_mode(\"view\")\ntm_shape(studyArea) + #plot polygon before point/line\n  tm_polygons() +\ntm_shape(LCLQ_stores) +\n  tm_dots(\n    col = \"X7.Eleven\",\n    size = 0.01,\n    border.col = \"black\",\n    border.lwd = 0.5\n  ) +\n  tm_view(set.zoom.limits = c(12,16))\n\n\n\n\n\n\n\ncan see which points are colocated/isolated\np-values = 0.999, colocated but not significant"
  },
  {
    "objectID": "inclass_ex/ICE5/data/stores.html",
    "href": "inclass_ex/ICE5/data/stores.html",
    "title": "IS415",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     \n\n\n        0 0     false"
  },
  {
    "objectID": "inclass_ex/ICE5/data/study_area.html",
    "href": "inclass_ex/ICE5/data/study_area.html",
    "title": "IS415",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "take_home_ex/THE1/THE1.html#wpdx-dataset",
    "href": "take_home_ex/THE1/THE1.html#wpdx-dataset",
    "title": "Take Home Exercise 1",
    "section": "2.2 WPdx+ Dataset",
    "text": "2.2 WPdx+ Dataset\n\n2.2.1 Import Data\nFrom the aspatial data folder, import the WPdx csv file. Using the filter() function, get the Osun State data.\n\nwp_nga_osun <- read_csv(\"data/aspatial/WPdx.csv\") %>%\n  filter(`#adm1` == \"Osun\")\n\n\nhead(wp_nga_osun, n = 5)\n\n# A tibble: 5 × 74\n  row_id #sour…¹ #lat_…² #lon_…³ #repo…⁴ #stat…⁵ #wate…⁶ #wate…⁷ #wate…⁸ #wate…⁹\n   <dbl> <chr>     <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>   <chr>  \n1 225950 Federa…    7.43    4.26 05/05/… Yes     Boreho… Well    Hand P… Hand P…\n2 225524 Federa…    7.78    4.56 04/22/… Yes     Protec… Well    Hand P… Hand P…\n3 197014 Federa…    7.49    4.53 04/30/… Yes     Boreho… Well    Mechan… Mechan…\n4 225173 Federa…    7.93    4.73 05/02/… Yes     Boreho… Well    Hand P… Hand P…\n5 225843 Federa…    7.74    4.44 05/08/… Yes     Boreho… Well    Hand P… Hand P…\n# … with 64 more variables: `#facility_type` <chr>,\n#   `#clean_country_name` <chr>, `#clean_adm1` <chr>, `#clean_adm2` <chr>,\n#   `#clean_adm3` <chr>, `#clean_adm4` <chr>, `#install_year` <dbl>,\n#   `#installer` <chr>, `#rehab_year` <lgl>, `#rehabilitator` <lgl>,\n#   `#management_clean` <chr>, `#status_clean` <chr>, `#pay` <chr>,\n#   `#fecal_coliform_presence` <chr>, `#fecal_coliform_value` <dbl>,\n#   `#subjective_quality` <chr>, `#activity_id` <chr>, `#scheme_id` <chr>, …\n\n\n\n\n2.2.2 Creating sf Dataframe and Projection\n\nConvert wp_nga_osun into sf data.frame using st_as_sfc()\n\n\nwp_nga_osun$Geometry = st_as_sfc(wp_nga_osun$`New Georeferenced Column`)\nhead(wp_nga_osun)\n\n# A tibble: 6 × 75\n  row_id #sour…¹ #lat_…² #lon_…³ #repo…⁴ #stat…⁵ #wate…⁶ #wate…⁷ #wate…⁸ #wate…⁹\n   <dbl> <chr>     <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>   <chr>  \n1 225950 Federa…    7.43    4.26 05/05/… Yes     Boreho… Well    Hand P… Hand P…\n2 225524 Federa…    7.78    4.56 04/22/… Yes     Protec… Well    Hand P… Hand P…\n3 197014 Federa…    7.49    4.53 04/30/… Yes     Boreho… Well    Mechan… Mechan…\n4 225173 Federa…    7.93    4.73 05/02/… Yes     Boreho… Well    Hand P… Hand P…\n5 225843 Federa…    7.74    4.44 05/08/… Yes     Boreho… Well    Hand P… Hand P…\n6 235508 Federa…    7.15    4.64 04/27/… Yes     Protec… Well    Hand P… Hand P…\n# … with 65 more variables: `#facility_type` <chr>,\n#   `#clean_country_name` <chr>, `#clean_adm1` <chr>, `#clean_adm2` <chr>,\n#   `#clean_adm3` <chr>, `#clean_adm4` <chr>, `#install_year` <dbl>,\n#   `#installer` <chr>, `#rehab_year` <lgl>, `#rehabilitator` <lgl>,\n#   `#management_clean` <chr>, `#status_clean` <chr>, `#pay` <chr>,\n#   `#fecal_coliform_presence` <chr>, `#fecal_coliform_value` <dbl>,\n#   `#subjective_quality` <chr>, `#activity_id` <chr>, `#scheme_id` <chr>, …\n\n\n\nConvert tibble data.frame into sf object using st_sf(), including the correct Nigeria coordinate system, 26392.\n\n\nwp_sf <- st_sf(wp_nga_osun, crs = 4326) %>%\n  st_transform(crs = 26392)\nhead(wp_sf)\n\nSimple feature collection with 6 features and 74 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 202548.3 ymin: 350391.9 xmax: 254470 ymax: 435793.7\nProjected CRS: Minna / Nigeria Mid Belt\n# A tibble: 6 × 75\n  row_id #sour…¹ #lat_…² #lon_…³ #repo…⁴ #stat…⁵ #wate…⁶ #wate…⁷ #wate…⁸ #wate…⁹\n   <dbl> <chr>     <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>   <chr>  \n1 225950 Federa…    7.43    4.26 05/05/… Yes     Boreho… Well    Hand P… Hand P…\n2 225524 Federa…    7.78    4.56 04/22/… Yes     Protec… Well    Hand P… Hand P…\n3 197014 Federa…    7.49    4.53 04/30/… Yes     Boreho… Well    Mechan… Mechan…\n4 225173 Federa…    7.93    4.73 05/02/… Yes     Boreho… Well    Hand P… Hand P…\n5 225843 Federa…    7.74    4.44 05/08/… Yes     Boreho… Well    Hand P… Hand P…\n6 235508 Federa…    7.15    4.64 04/27/… Yes     Protec… Well    Hand P… Hand P…\n# … with 65 more variables: `#facility_type` <chr>,\n#   `#clean_country_name` <chr>, `#clean_adm1` <chr>, `#clean_adm2` <chr>,\n#   `#clean_adm3` <chr>, `#clean_adm4` <chr>, `#install_year` <dbl>,\n#   `#installer` <chr>, `#rehab_year` <lgl>, `#rehabilitator` <lgl>,\n#   `#management_clean` <chr>, `#status_clean` <chr>, `#pay` <chr>,\n#   `#fecal_coliform_presence` <chr>, `#fecal_coliform_value` <dbl>,\n#   `#subjective_quality` <chr>, `#activity_id` <chr>, `#scheme_id` <chr>, …\n\n\n\nCheck that the EPSG is correct\n\n\nst_crs(wp_sf)\n\nCoordinate Reference System:\n  User input: EPSG:26392 \n  wkt:\nPROJCRS[\"Minna / Nigeria Mid Belt\",\n    BASEGEOGCRS[\"Minna\",\n        DATUM[\"Minna\",\n            ELLIPSOID[\"Clarke 1880 (RGS)\",6378249.145,293.465,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4263]],\n    CONVERSION[\"Nigeria Mid Belt\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",4,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",8.5,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.99975,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",670553.98,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Nigeria between 6°30'E and 10°30'E, onshore and offshore shelf.\"],\n        BBOX[3.57,6.5,13.53,10.51]],\n    ID[\"EPSG\",26392]]\n\n\n\nUse st_geometry() to understand the sf dataframe\n\n\nst_geometry(wp_sf)\n\nGeometry set for 5059 features \nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 182486.3 ymin: 340054.1 xmax: 291546.1 ymax: 452045.5\nProjected CRS: Minna / Nigeria Mid Belt\nFirst 5 geometries:\n\n\n\nwp_sf contains 5059 points"
  },
  {
    "objectID": "take_home_ex/THE1/THE1.html#nigeria-administrative-boundaries-level-2",
    "href": "take_home_ex/THE1/THE1.html#nigeria-administrative-boundaries-level-2",
    "title": "Take Home Exercise 1",
    "section": "2.3 Nigeria Administrative Boundaries Level 2",
    "text": "2.3 Nigeria Administrative Boundaries Level 2\n\n2.3.1 Import Data\nTo import a shapefile, use st_read() where dsn is the targeted directory and layer is the name of the files.\n\nnga <- st_read(\n  dsn = \"data/geospatial\",\n  layer = \"nga_polnda_adm2_1m_salb\"\n)\n\nReading layer `nga_polnda_adm2_1m_salb' from data source \n  `D:\\bellekwang\\IS415\\take_home_ex\\THE1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 773 features and 12 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668432 ymin: 4.277144 xmax: 14.67808 ymax: 13.90103\nGeodetic CRS:  WGS 84\n\n\n\nnga is a MULTIPOLYGON sf dataframe with 1685 features is imported.\n\n\n\n2.3.2 Projection\nThe geodetic CRS is wrong. Using st_transform(), change the CRS from WGS84 to Minna / Nigeria Mid Belt (26392)\n\nnga <- st_transform(nga, crs = 26392)\nst_crs(nga)\n\nCoordinate Reference System:\n  User input: EPSG:26392 \n  wkt:\nPROJCRS[\"Minna / Nigeria Mid Belt\",\n    BASEGEOGCRS[\"Minna\",\n        DATUM[\"Minna\",\n            ELLIPSOID[\"Clarke 1880 (RGS)\",6378249.145,293.465,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4263]],\n    CONVERSION[\"Nigeria Mid Belt\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",4,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",8.5,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.99975,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",670553.98,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Nigeria between 6°30'E and 10°30'E, onshore and offshore shelf.\"],\n        BBOX[3.57,6.5,13.53,10.51]],\n    ID[\"EPSG\",26392]]\n\n\nTo better understand the data, use st_geometry() on the sf dataframe:\n\nst_geometry(nga)\n\nGeometry set for 773 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 26650.44 ymin: 30984.34 xmax: 1344058 ymax: 1096748\nProjected CRS: Minna / Nigeria Mid Belt\nFirst 5 geometries:"
  },
  {
    "objectID": "take_home_ex/THE1/THE1.html#geoboundaries",
    "href": "take_home_ex/THE1/THE1.html#geoboundaries",
    "title": "Take Home Exercise 1",
    "section": "2.4 geoBoundaries",
    "text": "2.4 geoBoundaries\n\n2.4.1 Import Data\nSimilarly to the previous dataset, this dataset is in the form of a shapefile. geoNga is a MULTIPOLYGON sf data frame with 774 features.\n\ngeoNga <- st_read(\n  dsn = \"data/geospatial\",\n  layer = \"geoBoundaries-NGA-ADM2\"\n)\n\nReading layer `geoBoundaries-NGA-ADM2' from data source \n  `D:\\bellekwang\\IS415\\take_home_ex\\THE1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\n\n\n2.4.2 Projection\nSimilarly, use st_transform() to change to the correct CRS.\n\ngeoNga <- st_transform(geoNga, crs = 26392)\nst_crs(geoNga)\n\nCoordinate Reference System:\n  User input: EPSG:26392 \n  wkt:\nPROJCRS[\"Minna / Nigeria Mid Belt\",\n    BASEGEOGCRS[\"Minna\",\n        DATUM[\"Minna\",\n            ELLIPSOID[\"Clarke 1880 (RGS)\",6378249.145,293.465,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4263]],\n    CONVERSION[\"Nigeria Mid Belt\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",4,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",8.5,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.99975,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",670553.98,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Nigeria between 6°30'E and 10°30'E, onshore and offshore shelf.\"],\n        BBOX[3.57,6.5,13.53,10.51]],\n    ID[\"EPSG\",26392]]\n\n\nTo understand this dataset better:\n\nst_geometry(geoNga)\n\nGeometry set for 774 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 26662.71 ymin: 30523.38 xmax: 1344157 ymax: 1096029\nProjected CRS: Minna / Nigeria Mid Belt\nFirst 5 geometries:"
  },
  {
    "objectID": "take_home_ex/THE1/THE1.html#geonga",
    "href": "take_home_ex/THE1/THE1.html#geonga",
    "title": "Take Home Exercise 1",
    "section": "3.1 geoNga",
    "text": "3.1 geoNga\nThere are 30 LGAs in Osun state:\nAiyedaade, Aiyedire, Atakunmosa East, Atakunmosa West, Boluwaduro, Boripe, Ede North, Ede South, Egbedore, Ejigbo, Ife Central, Ife East, Ife North, Ife South, Ifedayo, Ifelodun, Ila, Ilesa East, Ilesa West, Irepodun, Irewole, Isokan, Iwo, Obokun, Odo Otin, Ola Oluwa, Olorunda, Oriade, Orolu, Osogbo\n(source: Local Government Areas in Osun State - Nigeria Postcode)\n\ngeoNga_osun <- geoNga %>%\n  filter(\n    `shapeName` %in%\n      c(\n        \"Aiyedaade\", \"Aiyedire\", \"Atakunmosa East\", \"Atakunmosa West\", \"Boluwaduro\", \"Boripe\", \"Ede North\", \"Ede South\", \"Egbedore\", \"Ejigbo\", \"Ife Central\", \"Ife East\", \"Ife North\", \"Ife South\", \"Ifedayo\", \"Ifelodun\", \"Ila\", \"Ilesa East\", \"Ilesa West\", \"Irepodun\", \"Irewole\", \"Isokan\", \"Iwo\", \"Obokun\", \"Odo Otin\", \"Ola Oluwa\", \"Olorunda\", \"Oriade\", \"Orolu\", \"Osogbo\"\n      )\n  )\n\n\nst_geometry(geoNga_osun)\n\nGeometry set for 25 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 176503.2 ymin: 331434.7 xmax: 334326.1 ymax: 561081.8\nProjected CRS: Minna / Nigeria Mid Belt\nFirst 5 geometries:\n\n\nThere are only 25 features in geoNga_osun data frame, there are 5 missing areas not accounted for."
  },
  {
    "objectID": "take_home_ex/THE1/THE1.html#nga",
    "href": "take_home_ex/THE1/THE1.html#nga",
    "title": "Take Home Exercise 1",
    "section": "3.2 nga",
    "text": "3.2 nga\nFor the nga data frame, Osun state areas can easily be filtered out through the column “ADM1_NAME”.\n\nnga_osun <- nga %>%\n  filter(`ADM1_NAME` == \"Osun\")\n\n\nst_geometry(nga_osun)\n\nGeometry set for 30 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 179634.5 ymin: 331434.7 xmax: 291043.8 ymax: 454520.1\nProjected CRS: Minna / Nigeria Mid Belt\nFirst 5 geometries:\n\n\nnga_osun has all the 30 LGAs thus I will be using this data frame instead of the one from geoBoundaries."
  },
  {
    "objectID": "take_home_ex/THE1/THE1.html#wp_sf",
    "href": "take_home_ex/THE1/THE1.html#wp_sf",
    "title": "Take Home Exercise 1",
    "section": "3.3 wp_sf",
    "text": "3.3 wp_sf\n\n3.3.1 Understanding the Water Point Categories\nFirst, use unique() to understand the categories under the “#status_clean” column.\n\nunique(wp_sf$`#status_clean`)\n\n[1] \"Functional\"                \"Functional, needs repair\" \n[3] \"Abandoned/Decommissioned\"  \"Functional, not in use\"   \n[5] \"Functional but not in use\" \"Non-Functional\"           \n[7] \"Non-Functional, dry\"      \n\n\nCheck for any NA values in the “#status_clean” column\n\nsum(is.na(wp_sf$`#status_clean`))\n\n[1] 0\n\n\n\n\n3.3.2 Formatting the Water Point Categories\nSimplify the categories into 2 main categories: Functional and Non-functional:\n\nFunctional: “Functional”, “Functional, needs repair”, “Functional, not in use”, “Functional but not in use”\nNon-functional: “Non-Functional”, “Non-Functional, dry”, “Abandoned/Decommisioned”\n\nUse the filter() function to extract functional and non-functional water points.\n\nwp_functional <- wp_sf %>%\n  filter(\n    `#status_clean` %in%\n      c(\n        \"Functional\",\n        \"Functional, needs repair\",\n        \"Functional, not in use\",\n        \"Functional but not in use\"\n      )\n  )\n\n\nwp_nonfunctional <- wp_sf %>%\n  filter(\n    `#status_clean` %in%\n      c(\n        \"Non-Functional\",\n        \"Non-Functional, dry\",\n        \"Abandoned/Decommissioned\"\n      )\n  )"
  },
  {
    "objectID": "take_home_ex/THE1/THE1.html#conversion-to-spatial-pointpolygon-data-frames",
    "href": "take_home_ex/THE1/THE1.html#conversion-to-spatial-pointpolygon-data-frames",
    "title": "Take Home Exercise 1",
    "section": "3.4 Conversion to Spatial Point/Polygon Data Frames",
    "text": "3.4 Conversion to Spatial Point/Polygon Data Frames\nTo do the analysis in further sections, we need to first convert our data frames to the right form.\nFirst, convert the simple feature data frames into spatial points and polygon data frames.\n\nnga_osun_temp <- as_Spatial(nga_osun)\nwp_functional_temp <- as_Spatial(wp_functional)\nwp_nonfunctional_temp <- as_Spatial(wp_nonfunctional)\n\n\nnga_osun_temp\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 30 \nextent      : 179634.5, 291043.8, 331434.7, 454520.1  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 12\nnames       : CNTRY_NAME, CNTRY_CODE, ADM1_NAME, ADM1_CODE, ADM2_NAME, ADM2_CODE,   HRname,  HRpcode, HRparent,     Shape_Leng,      Shape_Area, ADM2_New \nmin values  :    Nigeria,        NGA,      Osun,    NGA030,  Aiyedade, NGA030001, Aiyedade, NG030001,    NG030, 0.312900819551, 0.0038013876587, Aiyedade \nmax values  :    Nigeria,        NGA,      Osun,    NGA030,    Osogbo, NGA030030,   Osogbo, NG030030,    NG030,  2.12133368798, 0.0907164277969,   Osogbo \n\n\n\nwp_functional_temp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 2797 \nextent      : 182486.3, 291495.7, 342491.7, 452045.5  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 74\nnames       : row_id,                                     X.source, X.lat_deg, X.lon_deg,          X.report_date, X.status_id,    X.water_source_clean, X.water_source_category,      X.water_tech_clean, X.water_tech_category, X.facility_type, X.clean_country_name, X.clean_adm1, X.clean_adm2, X.clean_adm3, ... \nmin values  : 184164, Federal Ministry of Water Resources, Nigeria, 7.0791641, 4.0771867, 01/01/2010 12:00:00 AM,     Unknown,                Borehole,                  Spring,               Hand Pump,             Hand Pump,        Improved,              Nigeria,        Ekiti,     Aiyedade,           NA, ... \nmax values  : 683844,                                        GRID3,   8.07116, 5.0617267, 08/29/2018 12:00:00 AM,         Yes, Undefined Hand Dug Well,                    Well, Mechanized Pump - Solar,       Mechanized Pump,        Improved,              Nigeria,          Oyo,     Surulere,           NA, ... \n\n\n\nwp_nonfunctional_temp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 2262 \nextent      : 182502.4, 291546.1, 340054.1, 451013.1  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 74\nnames       : row_id,                                     X.source, X.lat_deg, X.lon_deg,          X.report_date, X.status_id,    X.water_source_clean, X.water_source_category,      X.water_tech_clean, X.water_tech_category, X.facility_type, X.clean_country_name, X.clean_adm1, X.clean_adm2, X.clean_adm3, ... \nmin values  : 183489, Federal Ministry of Water Resources, Nigeria,  7.060309, 4.0773333, 04/22/2015 12:00:00 AM,          No,                Borehole,                  Spring,               Hand Pump,             Hand Pump,        Improved,              Nigeria,        Kwara,     Aiyedade,           NA, ... \nmax values  : 475147,                                        GRID3, 8.0618417, 5.0621867, 08/29/2018 12:00:00 AM,     Unknown, Undefined Hand Dug Well,                    Well, Mechanized Pump - Solar,       Mechanized Pump,        Improved,              Nigeria,          Oyo,     Surulere,           NA, ..."
  },
  {
    "objectID": "take_home_ex/THE1/THE1.html#conversion-from-spatial-classes-to-objects",
    "href": "take_home_ex/THE1/THE1.html#conversion-from-spatial-classes-to-objects",
    "title": "Take Home Exercise 1",
    "section": "3.5 Conversion from Spatial Classes to Objects",
    "text": "3.5 Conversion from Spatial Classes to Objects\nNext, we convert the data frames from spatial classes to objects using the as() function.\n\nnga_osun_sp <- as(nga_osun_temp, \"SpatialPolygons\")\nwp_functional_sp <- as(wp_functional_temp, \"SpatialPoints\")\nwp_nonfunctional_sp <- as(wp_nonfunctional_temp, \"SpatialPoints\")\n\n\nnga_osun_sp\n\nclass       : SpatialPolygons \nfeatures    : 30 \nextent      : 179634.5, 291043.8, 331434.7, 454520.1  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \n\n\n\nwp_functional_sp\n\nclass       : SpatialPoints \nfeatures    : 2797 \nextent      : 182486.3, 291495.7, 342491.7, 452045.5  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \n\n\n\nwp_nonfunctional_sp\n\nclass       : SpatialPoints \nfeatures    : 2262 \nextent      : 182502.4, 291546.1, 340054.1, 451013.1  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs"
  },
  {
    "objectID": "take_home_ex/THE1/THE1.html#conversion-from-spatial-object-to-ppp-format",
    "href": "take_home_ex/THE1/THE1.html#conversion-from-spatial-object-to-ppp-format",
    "title": "Take Home Exercise 1",
    "section": "3.6 Conversion from Spatial Object to ppp Format",
    "text": "3.6 Conversion from Spatial Object to ppp Format\nUsing the spatstat package, convert both functional and non-functional water points to the ppp format.\n\nwp_functional_ppp <- as(wp_functional_sp, \"ppp\")\nwp_nonfunctional_ppp <- as(wp_nonfunctional_sp, \"ppp\")\n\n\nsummary(wp_functional_ppp)\n\nPlanar point pattern:  2797 points\nAverage intensity 2.342078e-07 points per square unit\n\nCoordinates are given to 2 decimal places\ni.e. rounded to the nearest multiple of 0.01 units\n\nWindow: rectangle = [182486.3, 291495.68] x [342491.7, 452045.5] units\n                    (109000 x 109600 units)\nWindow area = 11942400000 square units\n\n\n\nsummary(wp_nonfunctional_ppp)\n\nPlanar point pattern:  2262 points\nAverage intensity 1.869518e-07 points per square unit\n\nCoordinates are given to 2 decimal places\ni.e. rounded to the nearest multiple of 0.01 units\n\nWindow: rectangle = [182502.44, 291546.08] x [340054.1, 451013.1] units\n                    (109000 x 111000 units)\nWindow area = 12099400000 square units"
  },
  {
    "objectID": "take_home_ex/THE1/THE1.html#jittering-any-duplicate-points",
    "href": "take_home_ex/THE1/THE1.html#jittering-any-duplicate-points",
    "title": "Take Home Exercise 1",
    "section": "3.7 Jittering Any Duplicate Points",
    "text": "3.7 Jittering Any Duplicate Points\n\nany(duplicated(wp_functional_ppp))\n\n[1] FALSE\n\n\n\nany(duplicated(wp_nonfunctional_ppp))\n\n[1] FALSE\n\n\nSince there are no duplicate points, there is no need for jittering."
  },
  {
    "objectID": "take_home_ex/THE1/THE1.html#creating-owin-object",
    "href": "take_home_ex/THE1/THE1.html#creating-owin-object",
    "title": "Take Home Exercise 1",
    "section": "3.8 Creating owin Object",
    "text": "3.8 Creating owin Object\nUsing the nga_osun_sp, create an owin object with the as() function.\n\nnga_osun_owin <- as(nga_osun_sp, \"owin\")\n\n\nplot(nga_osun_owin)"
  },
  {
    "objectID": "take_home_ex/THE1/THE1.html#combining-point-events-object-and-owin-object",
    "href": "take_home_ex/THE1/THE1.html#combining-point-events-object-and-owin-object",
    "title": "Take Home Exercise 1",
    "section": "3.9 Combining Point Events Object and owin Object",
    "text": "3.9 Combining Point Events Object and owin Object\nFirst, combine the functional water points with the owin object.\n\nwp_functional_nga_osun_ppp = wp_functional_ppp[nga_osun_owin]\n\n\nplot(wp_functional_nga_osun_ppp)\n\n\n\n\nNext, combine the non-functional water points with the owin object.\n\nwp_nonfunctional_nga_osun_ppp = wp_nonfunctional_ppp[nga_osun_owin]\n\n\nplot(wp_nonfunctional_nga_osun_ppp)\n\n\n\n\nNow that all the data has been prepared, we can move on to the analysis."
  },
  {
    "objectID": "take_home_ex/THE1/THE1.html#kernel-density-maps-of-functional-and-non-functional-water-points",
    "href": "take_home_ex/THE1/THE1.html#kernel-density-maps-of-functional-and-non-functional-water-points",
    "title": "Take Home Exercise 1",
    "section": "4.1 Kernel Density Maps of Functional and Non-functional Water Points",
    "text": "4.1 Kernel Density Maps of Functional and Non-functional Water Points\nI will first re-scale all the KDE values from meter to kilometer using the rescale() function.\n\nwp_functional_nga_osun_ppp.km <- rescale(wp_functional_nga_osun_ppp, 1000, \"km\")\nwp_nonfunctional_nga_osun_ppp.km <- rescale(wp_nonfunctional_nga_osun_ppp, 1000, \"km\")\n\n\n4.1.1 Comparing Algorithms\nI will then try out various algorithms to see which has the best output.\n\npar(mfrow = c(1,2))\nplot(density(\n    wp_functional_nga_osun_ppp.km,\n    sigma = bw.diggle,\n    edge = TRUE,\n    kernel = \"gaussian\"\n  ), main = \"Diggle, Gaussian\")\nplot(density(\n    wp_functional_nga_osun_ppp.km,\n    sigma = bw.diggle,\n    edge = TRUE,\n    kernel = \"epanechnikov\"\n  ), main = \"Diggle, Epanechnikov\")\n\n\n\nplot(density(\n    wp_functional_nga_osun_ppp.km,\n    sigma = bw.diggle,\n    edge = TRUE,\n    kernel = \"quartic\"\n  ), main = \"Diggle, Quartic\")\nplot(density(\n    wp_functional_nga_osun_ppp.km,\n    sigma = bw.diggle,\n    edge = TRUE,\n    kernel = \"disc\"\n  ), main = \"Diggle, disc\")\n\n\n\nplot(density(\n    wp_functional_nga_osun_ppp.km,\n    sigma = bw.ppl,\n    edge = TRUE,\n    kernel = \"gaussian\"\n  ), main = \"ppl, Gaussian\")\nplot(density(\n    wp_functional_nga_osun_ppp.km,\n    sigma = bw.ppl,\n    edge = TRUE,\n    kernel = \"epanechnikov\"\n  ), main = \"ppl, Epanechnikov\")\n\n\n\nplot(density(\n    wp_functional_nga_osun_ppp.km,\n    sigma = bw.ppl,\n    edge = TRUE,\n    kernel = \"quartic\"\n  ), main = \"ppl, Quartic\")\nplot(density(\n    wp_functional_nga_osun_ppp.km,\n    sigma = bw.ppl,\n    edge = TRUE,\n    kernel = \"disc\"\n  ), main = \"ppl, disc\")\n\n\n\n\nAs seen from the maps above, using the bw.ppl sigma works significantly better than bw.diggle.\n\nbw.ppl(wp_functional_nga_osun_ppp.km)\n\n    sigma \n0.6040003 \n\n\nI will use a fixed sigma of 0.6 from here onward.\n\nkde_wp_functional_nga_osun_bw <- density(\n  wp_functional_nga_osun_ppp.km,\n  sigma = 0.6,\n  edge = TRUE,\n  kernel = \"quartic\"\n)\nkde_wp_nonfunctional_nga_osun_bw <- density(\n  wp_nonfunctional_nga_osun_ppp.km,\n  sigma = 0.6,\n  edge = TRUE,\n  kernel = \"quartic\"\n)\n\n\n\n4.1.2 Functional Water Points KDE Map\n\ngridded_kde_wp_functional_nga_osun_bw <- as.SpatialGridDataFrame.im(kde_wp_functional_nga_osun_bw)\nspplot(gridded_kde_wp_functional_nga_osun_bw)\n\n\n\n\n\n\n4.1.3 Non-functional Water Points KDE Map\n\ngridded_kde_wp_nonfunctional_nga_osun_bw <- as.SpatialGridDataFrame.im(kde_wp_nonfunctional_nga_osun_bw)\nspplot(gridded_kde_wp_nonfunctional_nga_osun_bw)"
  },
  {
    "objectID": "take_home_ex/THE1/THE1.html#kde-map-on-openstreetmap",
    "href": "take_home_ex/THE1/THE1.html#kde-map-on-openstreetmap",
    "title": "Take Home Exercise 1",
    "section": "4.2 KDE Map on Openstreetmap",
    "text": "4.2 KDE Map on Openstreetmap\nFirst, the grid output needs to be converted into a raster layer for visualisation, using the raster() function.\n\nkde_wp_functional_nga_osun_bw_raster <- raster(kde_wp_functional_nga_osun_bw)\nkde_wp_nonfunctional_nga_osun_bw_raster <- raster(kde_wp_nonfunctional_nga_osun_bw)\n\nCheck if there is missing CRS\n\nkde_wp_functional_nga_osun_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8703851, 0.9616047  (x, y)\nextent     : 179.6345, 291.0438, 331.4347, 454.5201  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : layer \nvalues     : -2.340835e-15, 15.21075  (min, max)\n\n\n\nkde_wp_nonfunctional_nga_osun_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8703851, 0.9616047  (x, y)\nextent     : 179.6345, 291.0438, 331.4347, 454.5201  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : layer \nvalues     : -2.297349e-15, 13.38929  (min, max)\n\n\nAssign the projection systems into the raster layers using the CRS() function.\n\nprojection(kde_wp_functional_nga_osun_bw_raster) <- CRS(\"+init=EPSG:26392\")\nkde_wp_functional_nga_osun_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8703851, 0.9616047  (x, y)\nextent     : 179.6345, 291.0438, 331.4347, 454.5201  (xmin, xmax, ymin, ymax)\ncrs        : +init=EPSG:26392 \nsource     : memory\nnames      : layer \nvalues     : -2.340835e-15, 15.21075  (min, max)\n\n\n\nprojection(kde_wp_nonfunctional_nga_osun_bw_raster) <- CRS(\"+init=EPSG:26392\")\nkde_wp_nonfunctional_nga_osun_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8703851, 0.9616047  (x, y)\nextent     : 179.6345, 291.0438, 331.4347, 454.5201  (xmin, xmax, ymin, ymax)\ncrs        : +init=EPSG:26392 \nsource     : memory\nnames      : layer \nvalues     : -2.297349e-15, 13.38929  (min, max)\n\n\n\n4.2.1 Functional Water Points\n\ntmap_mode(\"view\")\ntm_shape(kde_wp_functional_nga_osun_bw_raster) +\n  tm_raster() +\n  tm_view(set.zoom.limits = c(18,20))\n\n\n\n\n\n\n\n4.2.2 Non-functional Water Points\n\ntmap_mode(\"view\")\ntm_shape(kde_wp_nonfunctional_nga_osun_bw_raster) +\n  tm_raster() +\n  tm_view(set.zoom.limits = c(18,20))"
  },
  {
    "objectID": "take_home_ex/THE1/THE1.html#conclusion",
    "href": "take_home_ex/THE1/THE1.html#conclusion",
    "title": "Take Home Exercise 1",
    "section": "4.3 Conclusion",
    "text": "4.3 Conclusion\n\n4.3.1 Spatial Patterns\nBoth functional and non-functional water points are generally evenly spread out all over the Osun state.\nBased on the maps above, there are more dense spots for non-functional water points as compared to functional water points.\nMost of the denser spots for both functional and non-functional water points are located on the upper half of the Osun state.\n\n\n4.3.2 Advantage of Kernel Density Map\nWhen plotting a point map, multiple points may overlap over each other especially when the map is zoomed out. If there are too many points all over the map, it will be difficult to tell which area has more points as compared to other areas.\nWhereas the Kernel Density map shows the density by colour and will not clutter up the map with points. It makes analysis of density significantly easier to identify."
  },
  {
    "objectID": "take_home_ex/THE1/THE1.html#test-hypothesis-1",
    "href": "take_home_ex/THE1/THE1.html#test-hypothesis-1",
    "title": "Take Home Exercise 1",
    "section": "5.1 Test Hypothesis 1",
    "text": "5.1 Test Hypothesis 1\nH0 = The distribution of functional water points are randomly distributed.\nH1 = The distribution of functional water points are not randomly distributed.\nConfidence Interval = 95%\n\n5.1.1 Rationale for Tests\nI will be using 3 tests: Clark-Evans Test, G-function and L-function.\n\nClark-Evans Test\nG-function: Understand how spaced apart the events are in a point pattern\nL-function: Adjusted version of K-function, easier to distinguish the level of significance\n\nNOTE: was not able to run L-function test, R studio hangs everytime I try to run it.\n\n\n\n\n5.1.2 Nearest Neighbour Index (Clark-Evans Test)\n\nclarkevans.test(wp_functional_nga_osun_ppp,\n                correction=\"none\",\n                clipregion=\"nga_osun_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 99 simulations of CSR with fixed n\n\ndata:  wp_functional_nga_osun_ppp\nR = 0.42804, p-value = 0.01\nalternative hypothesis: clustered (R < 1)\n\n\n\nSince p-value is 0.01 which is smaller than 0.05, the null hypothesis is rejected.\nSince the R-value is 0.428 (3 d.p.) < 1, the pattern exhibits clustering\n\nConclusion: Based on the Clark-Evans test, the distribution of functional water points are not randomly distributed.\n\n\n5.1.3 G-Function\n\nGest(x): Estimates the nearest neighbour distance distribution function from a point pattern in a window of arbitrary shape\n\n\nG_F = Gest(wp_functional_nga_osun_ppp, correction = \"border\")\nplot(G_F, xlim = c(0, 500))\n\n\n\n\n\nenvelope(x): if p-value < alpha-value (0.001), then null hypothesis is rejected\n\n\nG_F.csr <- envelope(wp_functional_nga_osun_ppp, Gest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10 [etd 2:05] .........20 [etd 1:44] .........\n30 [etd 1:33] .........40 [etd 1:29] .........50 [etd 1:23] ........\n.60 [etd 1:21] .........70 [etd 1:20] .........80 [etd 1:20] .......\n..90 [etd 1:19] .........100 [etd 1:17] .........110 [etd 1:16] ......\n...120 [etd 1:15] .........130 [etd 1:14] .........140 [etd 1:13] .....\n....150 [etd 1:12] .........160 [etd 1:11] .........170 [etd 1:10] ....\n.....180 [etd 1:09] .........190 [etd 1:08] .........200 [etd 1:07] ...\n......210 [etd 1:06] .........220 [etd 1:05] .........230 [etd 1:04] ..\n.......240 [etd 1:03] .........250 [etd 1:02] .........260 [etd 1:01] .\n........270 [etd 1:00] .........280 [etd 59 sec] .........290\n [etd 58 sec] .........300 [etd 58 sec] .........310 [etd 57 sec] .........\n320 [etd 56 sec] .........330 [etd 56 sec] .........340 [etd 55 sec] ........\n.350 [etd 54 sec] .........360 [etd 53 sec] .........370 [etd 52 sec] .......\n..380 [etd 52 sec] .........390 [etd 51 sec] .........400 [etd 50 sec] ......\n...410 [etd 49 sec] .........420 [etd 48 sec] .........430 [etd 47 sec] .....\n....440 [etd 46 sec] .........450 [etd 45 sec] .........460 [etd 45 sec] ....\n.....470 [etd 44 sec] .........480 [etd 43 sec] .........490 [etd 42 sec] ...\n......500 [etd 41 sec] .........510 [etd 40 sec] .........520 [etd 40 sec] ..\n.......530 [etd 39 sec] .........540 [etd 38 sec] .........550 [etd 37 sec] .\n........560 [etd 36 sec] .........570 [etd 35 sec] .........580\n [etd 34 sec] .........590 [etd 34 sec] .........600 [etd 33 sec] .........\n610 [etd 32 sec] .........620 [etd 31 sec] .........630 [etd 30 sec] ........\n.640 [etd 29 sec] .........650 [etd 29 sec] .........660 [etd 28 sec] .......\n..670 [etd 27 sec] .........680 [etd 26 sec] .........690 [etd 25 sec] ......\n...700 [etd 24 sec] .........710 [etd 23 sec] .........720 [etd 23 sec] .....\n....730 [etd 22 sec] .........740 [etd 21 sec] .........750 [etd 20 sec] ....\n.....760 [etd 19 sec] .........770 [etd 19 sec] .........780 [etd 18 sec] ...\n......790 [etd 17 sec] .........800 [etd 16 sec] .........810 [etd 15 sec] ..\n.......820 [etd 15 sec] .........830 [etd 14 sec] .........840 [etd 13 sec] .\n........850 [etd 12 sec] .........860 [etd 11 sec] .........870\n [etd 10 sec] .........880 [etd 10 sec] .........890 [etd 9 sec] .........\n900 [etd 8 sec] .........910 [etd 7 sec] .........920 [etd 6 sec] ........\n.930 [etd 6 sec] .........940 [etd 5 sec] .........950 [etd 4 sec] .......\n..960 [etd 3 sec] .........970 [etd 2 sec] .........980 [etd 2 sec] ......\n...990 [etd 1 sec] ........ 999.\n\nDone.\n\n\n\nplot(G_F.csr)\n\n\n\n\n\nThe observed line is above the envelopes, suggesting a clustered pattern.\n\nConclusion: Based on the G function, there is clustering and the null hypothesis is rejected. The distribution of functional water points are not randomly distributed."
  },
  {
    "objectID": "take_home_ex/THE1/THE1.html#test-hypothesis-2",
    "href": "take_home_ex/THE1/THE1.html#test-hypothesis-2",
    "title": "Take Home Exercise 1",
    "section": "5.2 Test Hypothesis 2",
    "text": "5.2 Test Hypothesis 2\nH0 = The distribution of non-functional water points are randomly distributed.\nH1 = The distribution of non-functional water points are not randomly distributed.\nConfidence Interval = 95%\n\n5.2.1 Nearest Neighbour Index (Clark-Evans Test)\n\nclarkevans.test(wp_nonfunctional_nga_osun_ppp,\n                correction=\"none\",\n                clipregion=\"nga_osun_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 99 simulations of CSR with fixed n\n\ndata:  wp_nonfunctional_nga_osun_ppp\nR = 0.42087, p-value = 0.01\nalternative hypothesis: clustered (R < 1)\n\n\n\nSince p-value is 0.01 which is smaller than 0.05, the null hypothesis is rejected.\nSince the R-value is 0.421 (3 d.p.) < 1, the pattern exhibits clustering\n\nConclusion: Based on the Clark-Evans test, the distribution of non-functional water points are not randomly distributed.\n\n\n5.2.2 G-Function\n\nG_NF = Gest(wp_nonfunctional_nga_osun_ppp, correction = \"border\")\nplot(G_NF, xlim = c(0, 500))\n\n\n\n\n\nG_NF.csr <- envelope(wp_nonfunctional_nga_osun_ppp, Gest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60........\n.70.........80.........90.........100.........110.........120.........130......\n...140.........150.........160.........170.........180.........190.........200....\n.....210.........220.........230.........240.........250.........260.........270..\n.......280.........290.........300.........310.........320.........330.........340\n.........350.........360.........370.........380.........390.........400........\n.410.........420.........430.........440.........450.........460.........470......\n...480.........490.........500.........510.........520.........530.........540....\n.....550.........560.........570.........580.........590.........600.........610..\n.......620.........630.........640.........650.........660.........670.........680\n.........690.........700.........710.........720.........730.........740........\n.750.........760.........770.........780.........790.........800.........810......\n...820.........830.........840.........850.........860.........870.........880....\n.....890.........900.........910.........920.........930.........940.........950..\n.......960.........970.........980.........990........ 999.\n\nDone.\n\n\n\nplot(G_NF.csr)\n\n\n\n\n\nThe observed line is above the envelopes, suggesting a clustered pattern.\n\nConclusion: Based on the G function, there is clustering and the null hypothesis is rejected. The distribution of functional water points are not randomly distributed."
  },
  {
    "objectID": "take_home_ex/THE1/THE1.html#overall-conclusion",
    "href": "take_home_ex/THE1/THE1.html#overall-conclusion",
    "title": "Take Home Exercise 1",
    "section": "5.3 Overall Conclusion",
    "text": "5.3 Overall Conclusion\nFor both functional and non-functional water points, they exhibit patterns of clustering and are not randomly distributed."
  },
  {
    "objectID": "take_home_ex/THE1/THE1.html#test-hypothesis",
    "href": "take_home_ex/THE1/THE1.html#test-hypothesis",
    "title": "Take Home Exercise 1",
    "section": "6.1 Test Hypothesis",
    "text": "6.1 Test Hypothesis\nH0 = Spatial distribution of functional and non-functional water points are independent from each other.\nH1 = Spatial distribution of functional and non-functional water points are not independent from each other.\nConfidence Interval: 95%"
  },
  {
    "objectID": "take_home_ex/THE1/THE1.html#local-colocation-quotient",
    "href": "take_home_ex/THE1/THE1.html#local-colocation-quotient",
    "title": "Take Home Exercise 1",
    "section": "6.2 Local Colocation Quotient",
    "text": "6.2 Local Colocation Quotient\n\n6.2.1 Calculate Neighbour List\nSearch for the 6 nearest neighbour whilst including self, such that each list has 7 neighbours generated.\n\nnb <- include_self(st_knn(st_geometry(wp_sf), 6))\n\n\nhead(nb, n = 5)\n\n[[1]]\n[1]    1  124  314  387 2823 3174 3872\n\n[[2]]\n[1]    2  154  982 1300 1873 2392 3782\n\n[[3]]\n[1]    3 1978 2099 2175 2907 3352 3668\n\n[[4]]\n[1]    4 1121 1710 1828 1893 4032 4699\n\n[[5]]\n[1]    5  509 1266 1804 2007 2424 3801\n\n\n\n\n6.2.2 Calculate Weight Matrix\nUsing the st_kernel_weights() function, convert all nb into a weight matrix.\n\nwt <- st_kernel_weights(\n  nb, wp_sf, \"gaussian\", adaptive = TRUE\n)\n\n\n\n6.2.3 Calculate LCLQ\n\nLCLQ <- local_colocation(\n  wp_functional$`#status_clean`,\n  wp_nonfunctional$`#status_clean`,\n  nb, wt, 49\n)"
  },
  {
    "objectID": "take_home_ex/THE1/THE1.html#visualising-lclq",
    "href": "take_home_ex/THE1/THE1.html#visualising-lclq",
    "title": "Take Home Exercise 1",
    "section": "6.3 Visualising LCLQ",
    "text": "6.3 Visualising LCLQ\n\nLCLQ_wp <- cbind(wp_sf, LCLQ)\n\n\ntmap_mode(\"view\")\ntm_shape(nga_osun) +\n  tm_polygons() +\ntm_shape(LCLQ_wp) +\n  tm_dots(\n    col = \"Non.Functional\",\n    size = 0.01,\n    border.col = \"black\",\n    border.lwd = 0.5\n  )"
  },
  {
    "objectID": "take_home_ex/THE1/THE1.html#conclusion-1",
    "href": "take_home_ex/THE1/THE1.html#conclusion-1",
    "title": "Take Home Exercise 1",
    "section": "6.4 Conclusion",
    "text": "6.4 Conclusion\nThe majority of the non-functional water points have missing LCLQ values (assumed to be 0), representing that the majority of functional water points are unlikely to have non-functional water points within the neighbourhood.\nThere are a few non-functional water points with LCLQ values of 0.6 to 0.9, indicating that there are a few functional water points that has a chance of having non-functional water points within the neighbourhood.\nThere are multiple non-functional water points with LCLQ values of 1 to 1.1, indicating that:\n\nthere are multiple areas with a good representation of functional and non-functional water points throughout the neighbourhood.\nthere are multiple functional water points that are more likely to have non-functional water points within the neighbourhood."
  },
  {
    "objectID": "inclass_ex/ICE6/ICE6.html",
    "href": "inclass_ex/ICE6/ICE6.html",
    "title": "In-class Exercise 6:",
    "section": "",
    "text": "Help to identify who is the spatial neighbour of target polygon.\n2 methods:\n\nadjacency: based on shared boundary (if there is shared boundary = neighbour)\n\na polygon with a larger boundary may have more neighbours\nouter islands will not be considered: no shared boundaries\n\ndistance (more complicated): find centroid of each polygon and measure the distance\n\nspatial biasness: distance to neighbour highly varies depending on the size of polygon\n\n\nThus there is a need to study the map before deciding which matrix to use.\n\n\n\nQueen’s Case: All sides and edges are considered neighbours\nRook’s Case: Must explicity share a boundary (side)\n\n\n\nFor each row in the matrix, divide each number by the total number in the row to standardise the weights.\n\n\n\n\nsfdep: newer package, does not require conversion to sp"
  },
  {
    "objectID": "inclass_ex/ICE6/ICE6.html#installing-and-loading-packages",
    "href": "inclass_ex/ICE6/ICE6.html#installing-and-loading-packages",
    "title": "In-class Exercise 6:",
    "section": "2.1 Installing and Loading Packages",
    "text": "2.1 Installing and Loading Packages\n\npacman::p_load(sf, tmap, sfdep, tidyverse)"
  },
  {
    "objectID": "inclass_ex/ICE6/ICE6.html#importing-data",
    "href": "inclass_ex/ICE6/ICE6.html#importing-data",
    "title": "In-class Exercise 6:",
    "section": "2.2 Importing Data",
    "text": "2.2 Importing Data\n\n2.2.1 Hunan Geoboundary\n\nhunan <- st_read(\n  dsn = \"data/geospatial\",\n  layer = \"Hunan\"\n)\n\nReading layer `Hunan' from data source \n  `D:\\bellekwang\\IS415\\inclass_ex\\ICE6\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\nhunan is a sf data frame with 88 polygons\n\n\n\n2.2.2 Hunan 2012 GDP\n\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\nhead(hunan2012)\n\n# A tibble: 6 × 29\n  County   City  avg_w…¹ depos…²   FAI Gov_Rev Gov_Exp    GDP GDPPC    GIO  Loan\n  <chr>    <chr>   <dbl>   <dbl> <dbl>   <dbl>   <dbl>  <dbl> <dbl>  <dbl> <dbl>\n1 Anhua    Yiya…   30544  10967  6832.    457.   2703  13225  14567  9277. 3955.\n2 Anren    Chen…   28058   4599. 6386.    221.   1455.  4941. 12761  4189. 2555.\n3 Anxiang  Chan…   31935   5517. 3541     244.   1780. 12482  23667  5109. 2807.\n4 Baojing  Huna…   30843   2250  1005.    193.   1379.  4088. 14563  3624. 1254.\n5 Chaling  Zhuz…   31251   8241. 6508.    620.   1947  11585  20078  9158. 4287.\n6 Changni… Heng…   28518  10860  7920     770.   2632. 19886  24418 37392  4243.\n# … with 18 more variables: NIPCR <dbl>, Bed <dbl>, Emp <dbl>, EmpR <dbl>,\n#   EmpRT <dbl>, Pri_Stu <dbl>, Sec_Stu <dbl>, Household <dbl>,\n#   Household_R <dbl>, NOIP <dbl>, Pop_R <dbl>, RSCG <dbl>, Pop_T <dbl>,\n#   Agri <dbl>, Service <dbl>, Disp_Inc <dbl>, RORP <dbl>, ROREmp <dbl>, and\n#   abbreviated variable names ¹​avg_wage, ²​deposite\n\n\n\n\n2.2.3 Combining Both Data Frames\nCombine the data frames using left_join() function, ensuring that the geospatial data frame is on the LHS.\n\nhunan <- left_join(hunan, hunan2012) %>%\n  select(1:4, 7, 15)"
  },
  {
    "objectID": "handson_ex/HE6/HE6.html",
    "href": "handson_ex/HE6/HE6.html",
    "title": "Hands-on Exercise 6: Spatial Weights and Application",
    "section": "",
    "text": "pacman::p_load(sf, spdep, tmap, tidyverse, knitr)\n\n\n\n\n\n\n\nhunan <- st_read(\n  dsn = \"data/geospatial\",\n  layer = \"Hunan\"\n)\n\nReading layer `Hunan' from data source \n  `D:\\bellekwang\\IS415\\handson_ex\\HE6\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\nhunan is a POLYGON sf data frame with 88 features\nHunan is located in Central China which uses a CRS of WGS 84 (?)\n\n\n\n\n\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n\n\nUsing the left_join() function of dplyr package, combine hunan2012 to hunan sf data frame.\nUsing the select() function, pick out columns:\n\nhunan <- left_join(hunan, hunan2012) %>%\n  select(1:4, 7, 15)"
  },
  {
    "objectID": "handson_ex/HE6/HE6.html#computing-queen-contiguity-based-neighbours",
    "href": "handson_ex/HE6/HE6.html#computing-queen-contiguity-based-neighbours",
    "title": "Hands-on Exercise 6: Spatial Weights and Application",
    "section": "3.1 Computing Queen contiguity based neighbours",
    "text": "3.1 Computing Queen contiguity based neighbours\n\nwm_q <- poly2nb(hunan, queen = TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\n\nThe most connected area unit has 11 neighbours\nThere are 2 area units with only one neighbour\n\nTo check the neighbours of one area unit:\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\n\nPolygon 1 has 5 neighbours\n\nTo check the country name of area unit 1:\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\nTo check the country names of the 5 neighbours:\n\nhunan$NAME_3[c(2, 3, 4, 57, 85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nTo retrieve the GDPPC of the 5 neighbour countries:\n\nnb1 <- wm_q[[1]]\nnb1 <- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879"
  },
  {
    "objectID": "handson_ex/HE6/HE6.html#creating-rook-contiguity-based-neighbours",
    "href": "handson_ex/HE6/HE6.html#creating-rook-contiguity-based-neighbours",
    "title": "Hands-on Exercise 6: Spatial Weights and Application",
    "section": "3.2 Creating Rook Contiguity Based Neighbours",
    "text": "3.2 Creating Rook Contiguity Based Neighbours\nUsing poly2nb() function, when queen = FALSE, rook’s case will be used.\n\nwm_r <- poly2nb(hunan, queen = FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\n\nmost connected area unit has 10 neighbours, 1 less than that of queen’s case\n2 area unit has only one neighbour, same as that of queen’s case"
  },
  {
    "objectID": "handson_ex/HE6/HE6.html#visualising-contiguity-weights",
    "href": "handson_ex/HE6/HE6.html#visualising-contiguity-weights",
    "title": "Hands-on Exercise 6: Spatial Weights and Application",
    "section": "3.3 Visualising Contiguity Weights",
    "text": "3.3 Visualising Contiguity Weights\nConnectivity graph: takes a point and displays a line to each neighbouring point\n\nfor polygons: need to get points before creating the graph (use centroids: latitude and longitude)\n\n\n3.3.1 Calculating Centroids\nTo get the longitude:\n\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nTo get the latitude:\n\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nCombing the latitude and longitude into one object:\n\ncoords <- cbind(longitude, latitude)\n\n\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\n\n\n3.3.2 Plotting Queen Contiguity Based Neighbours Map\nPlot the geometry boundary before the points and lines.\n\nplot(hunan$geometry, border = \"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n3.3.3 Plotting Rook Contiguity Based Neighbours Map\n\nplot(hunan$geometry, border = \"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n3.3.4 Plotting Both Maps\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\", main=\"Queen Contiguity\")\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\", main=\"Rook Contiguity\")"
  },
  {
    "objectID": "inclass_ex/ICE6/ICE6.html#identify-contiguity-neighbours",
    "href": "inclass_ex/ICE6/ICE6.html#identify-contiguity-neighbours",
    "title": "In-class Exercise 6:",
    "section": "4.1 Identify Contiguity Neighbours",
    "text": "4.1 Identify Contiguity Neighbours\n\n4.1.1 Contiguity Neighbours Method\nQueen’s Method\n\ncn_queen <- hunan %>%\n  mutate(nb = st_contiguity(geometry),\n         .before = 1)\n\n\ncreates a new field nb that stores the neighbours into cn_queen\n.before = 1: places nb into the first column\n\nRook’s Method\n\ncn_rook <- hunan %>%\n  mutate(nb = st_contiguity(geometry),\n         queen = FALSE,\n         .before = 1)\n\n\nqueen = FALSE: rook’s method"
  }
]