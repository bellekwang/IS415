[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "inclass_ex/ICE2/ice2.html",
    "href": "inclass_ex/ICE2/ice2.html",
    "title": "In-Class Exercise 2: Geospatial Data Wrangling",
    "section": "",
    "text": "pacman::p_load(sf, tidyverse, funModeling)\n\nImporting WPdx+ data set\n\nwpdx <- read_csv(\"data/wpdx.csv\")\n\nRows: 1000 Columns: 70\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (36): source, status_id, water_source_clean, water_source_category, wat...\ndbl  (21): row_id, lat_deg, lon_deg, install_year, fecal_coliform_value, dis...\nlgl  (10): clean_adm3, clean_adm4, rehab_year, rehabilitator, fecal_coliform...\ndttm  (3): report_date, created_timestamp, updated\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCreating Feature Data Frame for WPDX\n\nwpdx_sf <- st_as_sf(wpdx,\n                    coords = c(\"lon_deg\", \"lat_deg\"),\n                    crs=4326) %>%\n  st_transform(crs=26392)\n\n\n\n\n\nadmin_bound = st_read(dsn=\"data/NGA_cnty_admin2\", layer = \"nga_polnda_adm2_1m_salb\")\n\nReading layer `nga_polnda_adm2_1m_salb' from data source \n  `D:\\bellekwang\\IS415\\inclass_ex\\ICE2\\data\\NGA_cnty_admin2' \n  using driver `ESRI Shapefile'\nSimple feature collection with 773 features and 12 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668432 ymin: 4.277144 xmax: 14.67808 ymax: 13.90103\nGeodetic CRS:  WGS 84\n\n\nConvert EPSG code to Nigeria’s\n\nadmin_bound26392 <- st_transform(admin_bound, 26392)\n\n\n\n\n\n\nwpdx_sf %>%\n  group_by(water_source_clean) %>%\n  summarise(n = n()) %>%\n  mutate(freq = n / sum(n))\n\nSimple feature collection with 6 features and 3 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 32641.6 ymin: 35935.16 xmax: 1292841 ymax: 963498.8\nProjected CRS: Minna / Nigeria Mid Belt\n# A tibble: 6 × 4\n  water_source_clean         n                                    geometry  freq\n* <chr>                  <int>                              <GEOMETRY [m]> <dbl>\n1 Borehole                 640 MULTIPOINT ((43897.13 282975.7), (49138.18… 0.64 \n2 Piped Water                3 MULTIPOINT ((103956.4 350486.9), (885856.5… 0.003\n3 Protected Shallow Well    24 MULTIPOINT ((67182.59 298773.7), (75487.21… 0.024\n4 Protected Spring          30 MULTIPOINT ((117673.1 271705.9), (272479.7… 0.03 \n5 Protected Well             1                    POINT (1261389 895410.5) 0.001\n6 <NA>                     302 MULTIPOINT ((32641.6 281060.9), (38160.14 … 0.302"
  },
  {
    "objectID": "handson_ex/HE3/HE3.html",
    "href": "handson_ex/HE3/HE3.html",
    "title": "Hands-on Exercise 3: Cloropleth Mapping with R",
    "section": "",
    "text": "pacman::p_load(sf, tmap, tidyverse)\n\nWarning: unable to access index for repository http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.2:\n  cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.2/PACKAGES'\n\n\npackage 'tmap' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\kwang\\AppData\\Local\\Temp\\Rtmp4AzRWp\\downloaded_packages\n\n\n\ntmap installed\n\n\nWarning in pacman::p_load(sf, tmap, tidyverse): Failed to install/load:\ntmap\n\n\n\nImporting Data\nImporting Geospatial Data\n\nmpsz <- st_read(\n  dsn='data/geospatial',\n  layer='MP14_SUBZONE_WEB_PL'\n)\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\bellekwang\\IS415\\handson_ex\\HE3\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\nImporting Attribute Data\n\npopdata <- read_csv('data/aspatial/respopagesextod2011to2020.csv')\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nData Wrangling\n\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()%>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\n\n\nJoining Attribute and Geospatial Data"
  },
  {
    "objectID": "inclass_ex/ICE3/ice3.html",
    "href": "inclass_ex/ICE3/ice3.html",
    "title": "In-class Exercise 3: Analytical Mappping",
    "section": "",
    "text": "Installing and loading packages\n\npacman::p_load(sf, tidyverse, tmap)\n\n\n\n\nNGA_wp <- read_rds(\"data/rds/NGA_wp.rds\")"
  },
  {
    "objectID": "inclass_ex/ICE3/ice3.html#basic-choropleth-mapping",
    "href": "inclass_ex/ICE3/ice3.html#basic-choropleth-mapping",
    "title": "In-class Exercise 3: Analytical Mappping",
    "section": "2 Basic Choropleth Mapping",
    "text": "2 Basic Choropleth Mapping\n\n2.1 Visualising Distribution of Non-functional Water Point\n\np1 <- tm_shape(NGA_wp) +\n  tm_fill(\"wp_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of functional water points by LGAs\",\n            legend.outside = FALSE)\n\n\np2 <- tm_shape(NGA_wp) +\n  tm_fill(\"total_wp\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of total water points by LGA\",\n            legend.outside = FALSE)\n\n\ntmap_arrange(p2, p1, nrow=1)"
  },
  {
    "objectID": "inclass_ex/ICE3/ice3.html#choropleth-map-for-rates",
    "href": "inclass_ex/ICE3/ice3.html#choropleth-map-for-rates",
    "title": "In-class Exercise 3: Analytical Mappping",
    "section": "3 Choropleth Map for Rates",
    "text": "3 Choropleth Map for Rates\n\n3.1 Deriving Proportion of Functional and Non-Functional Water Points\n\nNGA_wp <- NGA_wp %>%\n  mutate(pct_functional = wp_functional/total_wp) %>%\n  mutate(pct_nonfunctional = wp_nonfunctional/total_wp)\n\n\n\n3.2 Plotting Map of Rate\n\ntm_shape(NGA_wp) +\n  tm_fill(\"pct_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\",\n          legend.hist = TRUE) +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Rate map of functional water points by LGA\",\n            legend.outside = TRUE)"
  },
  {
    "objectID": "inclass_ex/ICE3/ice3.html#extreme-value-maps",
    "href": "inclass_ex/ICE3/ice3.html#extreme-value-maps",
    "title": "In-class Exercise 3: Analytical Mappping",
    "section": "4 Extreme Value Maps",
    "text": "4 Extreme Value Maps\n\n4.1 Percentile Map\nExclude NA records\n\nNGA_wp <- NGA_wp %>%\n  drop_na()\n\nCreate customised classification and extracting values\n\npercent <- c(0, .01, .1, .5, .9, .99, 1)\nvar <- NGA_wp[\"pct_functional\"] %>%\n  st_set_geometry(NULL)\nquantile(var[, 1], percent)\n\n       0%        1%       10%       50%       90%       99%      100% \n0.0000000 0.0000000 0.2169811 0.4791667 0.8611111 1.0000000 1.0000000 \n\n\n\n\n4.2 get.var Function\n\nget.var <- function(vname, df) {\n  v <- df[vname] %>%\n    st_set_geometry(NULL)\n  v <- unname(v[, 1])\n  return(v)\n}\n\n\n\n4.3 Percentile Mapping Function\n\npercentmap <- function(vnam, df, legtitle = NA, mtitle = \"Percentile Map\"){\n  percent <- c(0, .01, .1, .5, .9, .99, 1)\n  var <- get.var(vnam, df)\n  bperc <- quantile(var, percent)\n  tm_shape(df) +\n  tm_polygons() +\n  tm_shape(df) +\n    tm_fill(vnam,\n            title = legtitle,\n            breaks = bperc,\n            palette = \"Blues\",\n            labels = c(\"< 1%\", \"1% - 10%\", \"10% - 50%\", \"50% - 90%\", \"90%- 99%\", \"> 99%\")) +\n    tm_borders() +\n    tm_layout(main.title = mtitle,\n              title.position = c(\"right\", \"bottom\"))\n}\n\nTesting out the function\n\npercentmap(\"total_wp\", NGA_wp)\n\n\n\n\n\n\n4.4 Box Map\n\nggplot(data = NGA_wp,\n       aes(x = \"\",\n           y = wp_nonfunctional)) +\n  geom_boxplot()\n\n\n\n\n\n\n4.5 Boxbreak Function\n\nboxbreaks <- function(v,mult=1.5) {\n  qv <- unname(quantile(v))\n  iqr <- qv[4] - qv[2]\n  upfence <- qv[4] + mult * iqr\n  lofence <- qv[2] - mult * iqr\n  # initialize break points vector\n  bb <- vector(mode=\"numeric\",length=7)\n  # logic for lower and upper fences\n  if (lofence < qv[1]) {  # no lower outliers\n    bb[1] <- lofence\n    bb[2] <- floor(qv[1])\n  } else {\n    bb[2] <- lofence\n    bb[1] <- qv[1]\n  }\n  if (upfence > qv[5]) { # no upper outliers\n    bb[7] <- upfence\n    bb[6] <- ceiling(qv[5])\n  } else {\n    bb[6] <- upfence\n    bb[7] <- qv[5]\n  }\n  bb[3:5] <- qv[2:4]\n  return(bb)\n}\n\n\n\n4.6 Boxmap function\n\nboxmap <- function(vnam, df, \n                   legtitle=NA,\n                   mtitle=\"Box Map\",\n                   mult=1.5){\n  var <- get.var(vnam,df)\n  bb <- boxbreaks(var)\n  tm_shape(df) +\n    tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,title=legtitle,\n             breaks=bb,\n             palette=\"Blues\",\n          labels = c(\"lower outlier\", \n                     \"< 25%\", \n                     \"25% - 50%\", \n                     \"50% - 75%\",\n                     \"> 75%\", \n                     \"upper outlier\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"left\",\n                               \"top\"))\n}\n\n\ntmap_mode(\"plot\")\nboxmap(\"wp_nonfunctional\", NGA_wp)"
  },
  {
    "objectID": "inclass_ex/ICE3/ice3.html#recode-zero",
    "href": "inclass_ex/ICE3/ice3.html#recode-zero",
    "title": "In-class Exercise 3: Analytical Mappping",
    "section": "5 Recode Zero",
    "text": "5 Recode Zero\n\nNGA_wp <- NGA_wp %>%\n  mutate(wp_functional = na_if(\n    total_wp, total_wp < 0))"
  }
]