---
title: "In-class Exercise 6: "
date: "13 Feb 2023"
date-modified: "`r Sys.Date()`"
number-sections: true
format: html
execute: 
  echo: true
  eval: true
  warning: false
editor: visual
---

# Notes

## Spatial Weights (wij)

Help to identify who is the spatial neighbour of target polygon.

2 methods:

1.  adjacency: based on shared boundary (if there is shared boundary = neighbour)
    -   a polygon with a larger boundary may have more neighbours

    -   outer islands will not be considered: no shared boundaries
2.  distance (more complicated): find centroid of each polygon and measure the distance
    -   spatial biasness: distance to neighbour highly varies depending on the size of polygon

Thus there is a need to study the map before deciding which matrix to use.

## Contiguity Neighbours

Queen's Case: All sides and edges are considered neighbours

Rook's Case: Must explicity share a boundary (side)

## Row Standardisation

For each row in the matrix, divide each number by the total number in the row to standardise the weights.

## spdep vs sfdep

-   sfdep: newer package, does not require conversion to sp

# Setting Up

## Installing and Loading Packages

```{r}
pacman::p_load(sf, tmap, sfdep, tidyverse)
```

## Importing Data

### Hunan Geoboundary

```{r}
hunan <- st_read(
  dsn = "data/geospatial",
  layer = "Hunan"
)
```

-   hunan is a sf data frame with 88 polygons

### Hunan 2012 GDP

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
head(hunan2012)
```

### Combining Both Data Frames

Combine the data frames using `left_join()` function, *ensuring that the geospatial data frame is on the LHS*.

```{r}
hunan <- left_join(hunan, hunan2012) %>%
  select(1:4, 7, 15)
```

# Visualising

```{r}
hunan_GDPPC = qtm(hunan, "GDPPC")
```

```{r}
tmap_mode("plot")
tm_shape(hunan) +
  tm_fill(
    "GDPPC",
    style = "quantile",
    palette = "Blues",
    title = "GDPPC"
  ) +
  tm_layout(
    main.title = "Distribution of GDP per capita by distribution, Hunan Province",
    main.title.position = "center",
    main.title.size = 0.8,
    legend.height = 0.45,
    legend.width = 0.35,
    frame = TRUE
  ) +
  tm_borders(alpha = 0.5) +
  tm_compass(type = "8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha = 0.2)
```

# Analysis

## Identify Contiguity Neighbours

### Contiguity Neighbours Method

Queen's Method

```{r}
cn_queen <- hunan %>%
  mutate(nb = st_contiguity(geometry),
         .before = 1)
```

-   creates a new field `nb` that stores the neighbours into cn_queen

-   `.before = 1`: places nb into the first column

Rook's Method

```{r}
cn_rook <- hunan %>%
  mutate(nb = st_contiguity(geometry),
         queen = FALSE,
         .before = 1)
```

-   `queen = FALSE`: rook's method
